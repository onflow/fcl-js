/**
 * Generated by the protoc-gen-ts.  DO NOT EDIT!
 * compiler version: 3.19.4
 * source: flow/execution/execution.proto
 * git: https://github.com/thesayyn/protoc-gen-ts */
import * as dependency_1 from "./../entities/account";
import * as dependency_2 from "./../entities/block_header";
import * as dependency_3 from "./../entities/event";
import * as dependency_4 from "./../entities/transaction";
import * as pb_1 from "google-protobuf";
import * as grpc_1 from "@grpc/grpc-js";
export namespace flow.execution {
    export class PingRequest extends pb_1.Message {
        constructor(data?: any[] | {}) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], []);
            if (!Array.isArray(data) && typeof data == "object") { }
        }
        static fromObject(data: {}) {
            const message = new PingRequest({});
            return message;
        }
        toObject() {
            const data: {} = {};
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): PingRequest {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new PingRequest();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): PingRequest {
            return PingRequest.deserialize(bytes);
        }
    }
    export class PingResponse extends pb_1.Message {
        constructor(data?: any[] | {}) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], []);
            if (!Array.isArray(data) && typeof data == "object") { }
        }
        static fromObject(data: {}) {
            const message = new PingResponse({});
            return message;
        }
        toObject() {
            const data: {} = {};
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): PingResponse {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new PingResponse();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): PingResponse {
            return PingResponse.deserialize(bytes);
        }
    }
    export class GetAccountAtBlockIDRequest extends pb_1.Message {
        constructor(data?: any[] | {
            block_id?: Uint8Array;
            address?: Uint8Array;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], []);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("block_id" in data && data.block_id != undefined) {
                    this.block_id = data.block_id;
                }
                if ("address" in data && data.address != undefined) {
                    this.address = data.address;
                }
            }
        }
        get block_id() {
            return pb_1.Message.getField(this, 1) as Uint8Array;
        }
        set block_id(value: Uint8Array) {
            pb_1.Message.setField(this, 1, value);
        }
        get address() {
            return pb_1.Message.getField(this, 2) as Uint8Array;
        }
        set address(value: Uint8Array) {
            pb_1.Message.setField(this, 2, value);
        }
        static fromObject(data: {
            block_id?: Uint8Array;
            address?: Uint8Array;
        }) {
            const message = new GetAccountAtBlockIDRequest({});
            if (data.block_id != null) {
                message.block_id = data.block_id;
            }
            if (data.address != null) {
                message.address = data.address;
            }
            return message;
        }
        toObject() {
            const data: {
                block_id?: Uint8Array;
                address?: Uint8Array;
            } = {};
            if (this.block_id != null) {
                data.block_id = this.block_id;
            }
            if (this.address != null) {
                data.address = this.address;
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.block_id !== undefined)
                writer.writeBytes(1, this.block_id);
            if (this.address !== undefined)
                writer.writeBytes(2, this.address);
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): GetAccountAtBlockIDRequest {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new GetAccountAtBlockIDRequest();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.block_id = reader.readBytes();
                        break;
                    case 2:
                        message.address = reader.readBytes();
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): GetAccountAtBlockIDRequest {
            return GetAccountAtBlockIDRequest.deserialize(bytes);
        }
    }
    export class GetAccountAtBlockIDResponse extends pb_1.Message {
        constructor(data?: any[] | {
            account?: dependency_1.flow.entities.Account;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], []);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("account" in data && data.account != undefined) {
                    this.account = data.account;
                }
            }
        }
        get account() {
            return pb_1.Message.getWrapperField(this, dependency_1.flow.entities.Account, 1) as dependency_1.flow.entities.Account;
        }
        set account(value: dependency_1.flow.entities.Account) {
            pb_1.Message.setWrapperField(this, 1, value);
        }
        static fromObject(data: {
            account?: ReturnType<typeof dependency_1.flow.entities.Account.prototype.toObject>;
        }) {
            const message = new GetAccountAtBlockIDResponse({});
            if (data.account != null) {
                message.account = dependency_1.flow.entities.Account.fromObject(data.account);
            }
            return message;
        }
        toObject() {
            const data: {
                account?: ReturnType<typeof dependency_1.flow.entities.Account.prototype.toObject>;
            } = {};
            if (this.account != null) {
                data.account = this.account.toObject();
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.account !== undefined)
                writer.writeMessage(1, this.account, () => this.account.serialize(writer));
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): GetAccountAtBlockIDResponse {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new GetAccountAtBlockIDResponse();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        reader.readMessage(message.account, () => message.account = dependency_1.flow.entities.Account.deserialize(reader));
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): GetAccountAtBlockIDResponse {
            return GetAccountAtBlockIDResponse.deserialize(bytes);
        }
    }
    export class ExecuteScriptAtBlockIDRequest extends pb_1.Message {
        constructor(data?: any[] | {
            block_id?: Uint8Array;
            script?: Uint8Array;
            arguments?: Uint8Array[];
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [3], []);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("block_id" in data && data.block_id != undefined) {
                    this.block_id = data.block_id;
                }
                if ("script" in data && data.script != undefined) {
                    this.script = data.script;
                }
                if ("arguments" in data && data.arguments != undefined) {
                    this.arguments = data.arguments;
                }
            }
        }
        get block_id() {
            return pb_1.Message.getField(this, 1) as Uint8Array;
        }
        set block_id(value: Uint8Array) {
            pb_1.Message.setField(this, 1, value);
        }
        get script() {
            return pb_1.Message.getField(this, 2) as Uint8Array;
        }
        set script(value: Uint8Array) {
            pb_1.Message.setField(this, 2, value);
        }
        get arguments() {
            return pb_1.Message.getField(this, 3) as Uint8Array[];
        }
        set arguments(value: Uint8Array[]) {
            pb_1.Message.setField(this, 3, value);
        }
        static fromObject(data: {
            block_id?: Uint8Array;
            script?: Uint8Array;
            arguments?: Uint8Array[];
        }) {
            const message = new ExecuteScriptAtBlockIDRequest({});
            if (data.block_id != null) {
                message.block_id = data.block_id;
            }
            if (data.script != null) {
                message.script = data.script;
            }
            if (data.arguments != null) {
                message.arguments = data.arguments;
            }
            return message;
        }
        toObject() {
            const data: {
                block_id?: Uint8Array;
                script?: Uint8Array;
                arguments?: Uint8Array[];
            } = {};
            if (this.block_id != null) {
                data.block_id = this.block_id;
            }
            if (this.script != null) {
                data.script = this.script;
            }
            if (this.arguments != null) {
                data.arguments = this.arguments;
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.block_id !== undefined)
                writer.writeBytes(1, this.block_id);
            if (this.script !== undefined)
                writer.writeBytes(2, this.script);
            if (this.arguments !== undefined)
                writer.writeRepeatedBytes(3, this.arguments);
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): ExecuteScriptAtBlockIDRequest {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new ExecuteScriptAtBlockIDRequest();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.block_id = reader.readBytes();
                        break;
                    case 2:
                        message.script = reader.readBytes();
                        break;
                    case 3:
                        pb_1.Message.addToRepeatedField(message, 3, reader.readBytes());
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): ExecuteScriptAtBlockIDRequest {
            return ExecuteScriptAtBlockIDRequest.deserialize(bytes);
        }
    }
    export class ExecuteScriptAtBlockIDResponse extends pb_1.Message {
        constructor(data?: any[] | {
            value?: Uint8Array;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], []);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("value" in data && data.value != undefined) {
                    this.value = data.value;
                }
            }
        }
        get value() {
            return pb_1.Message.getField(this, 1) as Uint8Array;
        }
        set value(value: Uint8Array) {
            pb_1.Message.setField(this, 1, value);
        }
        static fromObject(data: {
            value?: Uint8Array;
        }) {
            const message = new ExecuteScriptAtBlockIDResponse({});
            if (data.value != null) {
                message.value = data.value;
            }
            return message;
        }
        toObject() {
            const data: {
                value?: Uint8Array;
            } = {};
            if (this.value != null) {
                data.value = this.value;
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.value !== undefined)
                writer.writeBytes(1, this.value);
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): ExecuteScriptAtBlockIDResponse {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new ExecuteScriptAtBlockIDResponse();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.value = reader.readBytes();
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): ExecuteScriptAtBlockIDResponse {
            return ExecuteScriptAtBlockIDResponse.deserialize(bytes);
        }
    }
    export class GetEventsForBlockIDsResponse extends pb_1.Message {
        constructor(data?: any[] | {
            results?: GetEventsForBlockIDsResponse.Result[];
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [1], []);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("results" in data && data.results != undefined) {
                    this.results = data.results;
                }
            }
        }
        get results() {
            return pb_1.Message.getRepeatedWrapperField(this, GetEventsForBlockIDsResponse.Result, 1) as GetEventsForBlockIDsResponse.Result[];
        }
        set results(value: GetEventsForBlockIDsResponse.Result[]) {
            pb_1.Message.setRepeatedWrapperField(this, 1, value);
        }
        static fromObject(data: {
            results?: ReturnType<typeof GetEventsForBlockIDsResponse.Result.prototype.toObject>[];
        }) {
            const message = new GetEventsForBlockIDsResponse({});
            if (data.results != null) {
                message.results = data.results.map(item => GetEventsForBlockIDsResponse.Result.fromObject(item));
            }
            return message;
        }
        toObject() {
            const data: {
                results?: ReturnType<typeof GetEventsForBlockIDsResponse.Result.prototype.toObject>[];
            } = {};
            if (this.results != null) {
                data.results = this.results.map((item: GetEventsForBlockIDsResponse.Result) => item.toObject());
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.results !== undefined)
                writer.writeRepeatedMessage(1, this.results, (item: GetEventsForBlockIDsResponse.Result) => item.serialize(writer));
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): GetEventsForBlockIDsResponse {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new GetEventsForBlockIDsResponse();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        reader.readMessage(message.results, () => pb_1.Message.addToRepeatedWrapperField(message, 1, GetEventsForBlockIDsResponse.Result.deserialize(reader), GetEventsForBlockIDsResponse.Result));
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): GetEventsForBlockIDsResponse {
            return GetEventsForBlockIDsResponse.deserialize(bytes);
        }
    }
    export namespace GetEventsForBlockIDsResponse {
        export class Result extends pb_1.Message {
            constructor(data?: any[] | {
                block_id?: Uint8Array;
                block_height?: number;
                events?: dependency_3.flow.entities.Event[];
            }) {
                super();
                pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [3], []);
                if (!Array.isArray(data) && typeof data == "object") {
                    if ("block_id" in data && data.block_id != undefined) {
                        this.block_id = data.block_id;
                    }
                    if ("block_height" in data && data.block_height != undefined) {
                        this.block_height = data.block_height;
                    }
                    if ("events" in data && data.events != undefined) {
                        this.events = data.events;
                    }
                }
            }
            get block_id() {
                return pb_1.Message.getField(this, 1) as Uint8Array;
            }
            set block_id(value: Uint8Array) {
                pb_1.Message.setField(this, 1, value);
            }
            get block_height() {
                return pb_1.Message.getField(this, 2) as number;
            }
            set block_height(value: number) {
                pb_1.Message.setField(this, 2, value);
            }
            get events() {
                return pb_1.Message.getRepeatedWrapperField(this, dependency_3.flow.entities.Event, 3) as dependency_3.flow.entities.Event[];
            }
            set events(value: dependency_3.flow.entities.Event[]) {
                pb_1.Message.setRepeatedWrapperField(this, 3, value);
            }
            static fromObject(data: {
                block_id?: Uint8Array;
                block_height?: number;
                events?: ReturnType<typeof dependency_3.flow.entities.Event.prototype.toObject>[];
            }) {
                const message = new Result({});
                if (data.block_id != null) {
                    message.block_id = data.block_id;
                }
                if (data.block_height != null) {
                    message.block_height = data.block_height;
                }
                if (data.events != null) {
                    message.events = data.events.map(item => dependency_3.flow.entities.Event.fromObject(item));
                }
                return message;
            }
            toObject() {
                const data: {
                    block_id?: Uint8Array;
                    block_height?: number;
                    events?: ReturnType<typeof dependency_3.flow.entities.Event.prototype.toObject>[];
                } = {};
                if (this.block_id != null) {
                    data.block_id = this.block_id;
                }
                if (this.block_height != null) {
                    data.block_height = this.block_height;
                }
                if (this.events != null) {
                    data.events = this.events.map((item: dependency_3.flow.entities.Event) => item.toObject());
                }
                return data;
            }
            serialize(): Uint8Array;
            serialize(w: pb_1.BinaryWriter): void;
            serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
                const writer = w || new pb_1.BinaryWriter();
                if (this.block_id !== undefined)
                    writer.writeBytes(1, this.block_id);
                if (this.block_height !== undefined)
                    writer.writeUint64(2, this.block_height);
                if (this.events !== undefined)
                    writer.writeRepeatedMessage(3, this.events, (item: dependency_3.flow.entities.Event) => item.serialize(writer));
                if (!w)
                    return writer.getResultBuffer();
            }
            static deserialize(bytes: Uint8Array | pb_1.BinaryReader): Result {
                const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new Result();
                while (reader.nextField()) {
                    if (reader.isEndGroup())
                        break;
                    switch (reader.getFieldNumber()) {
                        case 1:
                            message.block_id = reader.readBytes();
                            break;
                        case 2:
                            message.block_height = reader.readUint64();
                            break;
                        case 3:
                            reader.readMessage(message.events, () => pb_1.Message.addToRepeatedWrapperField(message, 3, dependency_3.flow.entities.Event.deserialize(reader), dependency_3.flow.entities.Event));
                            break;
                        default: reader.skipField();
                    }
                }
                return message;
            }
            serializeBinary(): Uint8Array {
                return this.serialize();
            }
            static deserializeBinary(bytes: Uint8Array): Result {
                return Result.deserialize(bytes);
            }
        }
    }
    export class GetEventsForBlockIDsRequest extends pb_1.Message {
        constructor(data?: any[] | {
            type?: string;
            block_ids?: Uint8Array[];
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [2], []);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("type" in data && data.type != undefined) {
                    this.type = data.type;
                }
                if ("block_ids" in data && data.block_ids != undefined) {
                    this.block_ids = data.block_ids;
                }
            }
        }
        get type() {
            return pb_1.Message.getField(this, 1) as string;
        }
        set type(value: string) {
            pb_1.Message.setField(this, 1, value);
        }
        get block_ids() {
            return pb_1.Message.getField(this, 2) as Uint8Array[];
        }
        set block_ids(value: Uint8Array[]) {
            pb_1.Message.setField(this, 2, value);
        }
        static fromObject(data: {
            type?: string;
            block_ids?: Uint8Array[];
        }) {
            const message = new GetEventsForBlockIDsRequest({});
            if (data.type != null) {
                message.type = data.type;
            }
            if (data.block_ids != null) {
                message.block_ids = data.block_ids;
            }
            return message;
        }
        toObject() {
            const data: {
                type?: string;
                block_ids?: Uint8Array[];
            } = {};
            if (this.type != null) {
                data.type = this.type;
            }
            if (this.block_ids != null) {
                data.block_ids = this.block_ids;
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (typeof this.type === "string" && this.type.length)
                writer.writeString(1, this.type);
            if (this.block_ids !== undefined)
                writer.writeRepeatedBytes(2, this.block_ids);
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): GetEventsForBlockIDsRequest {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new GetEventsForBlockIDsRequest();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.type = reader.readString();
                        break;
                    case 2:
                        pb_1.Message.addToRepeatedField(message, 2, reader.readBytes());
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): GetEventsForBlockIDsRequest {
            return GetEventsForBlockIDsRequest.deserialize(bytes);
        }
    }
    export class GetTransactionResultRequest extends pb_1.Message {
        constructor(data?: any[] | {
            block_id?: Uint8Array;
            transaction_id?: Uint8Array;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], []);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("block_id" in data && data.block_id != undefined) {
                    this.block_id = data.block_id;
                }
                if ("transaction_id" in data && data.transaction_id != undefined) {
                    this.transaction_id = data.transaction_id;
                }
            }
        }
        get block_id() {
            return pb_1.Message.getField(this, 1) as Uint8Array;
        }
        set block_id(value: Uint8Array) {
            pb_1.Message.setField(this, 1, value);
        }
        get transaction_id() {
            return pb_1.Message.getField(this, 2) as Uint8Array;
        }
        set transaction_id(value: Uint8Array) {
            pb_1.Message.setField(this, 2, value);
        }
        static fromObject(data: {
            block_id?: Uint8Array;
            transaction_id?: Uint8Array;
        }) {
            const message = new GetTransactionResultRequest({});
            if (data.block_id != null) {
                message.block_id = data.block_id;
            }
            if (data.transaction_id != null) {
                message.transaction_id = data.transaction_id;
            }
            return message;
        }
        toObject() {
            const data: {
                block_id?: Uint8Array;
                transaction_id?: Uint8Array;
            } = {};
            if (this.block_id != null) {
                data.block_id = this.block_id;
            }
            if (this.transaction_id != null) {
                data.transaction_id = this.transaction_id;
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.block_id !== undefined)
                writer.writeBytes(1, this.block_id);
            if (this.transaction_id !== undefined)
                writer.writeBytes(2, this.transaction_id);
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): GetTransactionResultRequest {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new GetTransactionResultRequest();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.block_id = reader.readBytes();
                        break;
                    case 2:
                        message.transaction_id = reader.readBytes();
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): GetTransactionResultRequest {
            return GetTransactionResultRequest.deserialize(bytes);
        }
    }
    export class GetTransactionByIndexRequest extends pb_1.Message {
        constructor(data?: any[] | {
            block_id?: Uint8Array;
            index?: number;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], []);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("block_id" in data && data.block_id != undefined) {
                    this.block_id = data.block_id;
                }
                if ("index" in data && data.index != undefined) {
                    this.index = data.index;
                }
            }
        }
        get block_id() {
            return pb_1.Message.getField(this, 1) as Uint8Array;
        }
        set block_id(value: Uint8Array) {
            pb_1.Message.setField(this, 1, value);
        }
        get index() {
            return pb_1.Message.getField(this, 2) as number;
        }
        set index(value: number) {
            pb_1.Message.setField(this, 2, value);
        }
        static fromObject(data: {
            block_id?: Uint8Array;
            index?: number;
        }) {
            const message = new GetTransactionByIndexRequest({});
            if (data.block_id != null) {
                message.block_id = data.block_id;
            }
            if (data.index != null) {
                message.index = data.index;
            }
            return message;
        }
        toObject() {
            const data: {
                block_id?: Uint8Array;
                index?: number;
            } = {};
            if (this.block_id != null) {
                data.block_id = this.block_id;
            }
            if (this.index != null) {
                data.index = this.index;
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.block_id !== undefined)
                writer.writeBytes(1, this.block_id);
            if (this.index !== undefined)
                writer.writeUint32(2, this.index);
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): GetTransactionByIndexRequest {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new GetTransactionByIndexRequest();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.block_id = reader.readBytes();
                        break;
                    case 2:
                        message.index = reader.readUint32();
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): GetTransactionByIndexRequest {
            return GetTransactionByIndexRequest.deserialize(bytes);
        }
    }
    export class GetTransactionResultResponse extends pb_1.Message {
        constructor(data?: any[] | {
            status_code?: number;
            error_message?: string;
            events?: dependency_3.flow.entities.Event[];
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [3], []);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("status_code" in data && data.status_code != undefined) {
                    this.status_code = data.status_code;
                }
                if ("error_message" in data && data.error_message != undefined) {
                    this.error_message = data.error_message;
                }
                if ("events" in data && data.events != undefined) {
                    this.events = data.events;
                }
            }
        }
        get status_code() {
            return pb_1.Message.getField(this, 1) as number;
        }
        set status_code(value: number) {
            pb_1.Message.setField(this, 1, value);
        }
        get error_message() {
            return pb_1.Message.getField(this, 2) as string;
        }
        set error_message(value: string) {
            pb_1.Message.setField(this, 2, value);
        }
        get events() {
            return pb_1.Message.getRepeatedWrapperField(this, dependency_3.flow.entities.Event, 3) as dependency_3.flow.entities.Event[];
        }
        set events(value: dependency_3.flow.entities.Event[]) {
            pb_1.Message.setRepeatedWrapperField(this, 3, value);
        }
        static fromObject(data: {
            status_code?: number;
            error_message?: string;
            events?: ReturnType<typeof dependency_3.flow.entities.Event.prototype.toObject>[];
        }) {
            const message = new GetTransactionResultResponse({});
            if (data.status_code != null) {
                message.status_code = data.status_code;
            }
            if (data.error_message != null) {
                message.error_message = data.error_message;
            }
            if (data.events != null) {
                message.events = data.events.map(item => dependency_3.flow.entities.Event.fromObject(item));
            }
            return message;
        }
        toObject() {
            const data: {
                status_code?: number;
                error_message?: string;
                events?: ReturnType<typeof dependency_3.flow.entities.Event.prototype.toObject>[];
            } = {};
            if (this.status_code != null) {
                data.status_code = this.status_code;
            }
            if (this.error_message != null) {
                data.error_message = this.error_message;
            }
            if (this.events != null) {
                data.events = this.events.map((item: dependency_3.flow.entities.Event) => item.toObject());
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.status_code !== undefined)
                writer.writeUint32(1, this.status_code);
            if (typeof this.error_message === "string" && this.error_message.length)
                writer.writeString(2, this.error_message);
            if (this.events !== undefined)
                writer.writeRepeatedMessage(3, this.events, (item: dependency_3.flow.entities.Event) => item.serialize(writer));
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): GetTransactionResultResponse {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new GetTransactionResultResponse();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.status_code = reader.readUint32();
                        break;
                    case 2:
                        message.error_message = reader.readString();
                        break;
                    case 3:
                        reader.readMessage(message.events, () => pb_1.Message.addToRepeatedWrapperField(message, 3, dependency_3.flow.entities.Event.deserialize(reader), dependency_3.flow.entities.Event));
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): GetTransactionResultResponse {
            return GetTransactionResultResponse.deserialize(bytes);
        }
    }
    export class GetTransactionsByBlockIDRequest extends pb_1.Message {
        constructor(data?: any[] | {
            block_id?: Uint8Array;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], []);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("block_id" in data && data.block_id != undefined) {
                    this.block_id = data.block_id;
                }
            }
        }
        get block_id() {
            return pb_1.Message.getField(this, 1) as Uint8Array;
        }
        set block_id(value: Uint8Array) {
            pb_1.Message.setField(this, 1, value);
        }
        static fromObject(data: {
            block_id?: Uint8Array;
        }) {
            const message = new GetTransactionsByBlockIDRequest({});
            if (data.block_id != null) {
                message.block_id = data.block_id;
            }
            return message;
        }
        toObject() {
            const data: {
                block_id?: Uint8Array;
            } = {};
            if (this.block_id != null) {
                data.block_id = this.block_id;
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.block_id !== undefined)
                writer.writeBytes(1, this.block_id);
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): GetTransactionsByBlockIDRequest {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new GetTransactionsByBlockIDRequest();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.block_id = reader.readBytes();
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): GetTransactionsByBlockIDRequest {
            return GetTransactionsByBlockIDRequest.deserialize(bytes);
        }
    }
    export class GetTransactionResultsResponse extends pb_1.Message {
        constructor(data?: any[] | {
            transaction_results?: GetTransactionResultResponse[];
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [1], []);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("transaction_results" in data && data.transaction_results != undefined) {
                    this.transaction_results = data.transaction_results;
                }
            }
        }
        get transaction_results() {
            return pb_1.Message.getRepeatedWrapperField(this, GetTransactionResultResponse, 1) as GetTransactionResultResponse[];
        }
        set transaction_results(value: GetTransactionResultResponse[]) {
            pb_1.Message.setRepeatedWrapperField(this, 1, value);
        }
        static fromObject(data: {
            transaction_results?: ReturnType<typeof GetTransactionResultResponse.prototype.toObject>[];
        }) {
            const message = new GetTransactionResultsResponse({});
            if (data.transaction_results != null) {
                message.transaction_results = data.transaction_results.map(item => GetTransactionResultResponse.fromObject(item));
            }
            return message;
        }
        toObject() {
            const data: {
                transaction_results?: ReturnType<typeof GetTransactionResultResponse.prototype.toObject>[];
            } = {};
            if (this.transaction_results != null) {
                data.transaction_results = this.transaction_results.map((item: GetTransactionResultResponse) => item.toObject());
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.transaction_results !== undefined)
                writer.writeRepeatedMessage(1, this.transaction_results, (item: GetTransactionResultResponse) => item.serialize(writer));
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): GetTransactionResultsResponse {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new GetTransactionResultsResponse();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        reader.readMessage(message.transaction_results, () => pb_1.Message.addToRepeatedWrapperField(message, 1, GetTransactionResultResponse.deserialize(reader), GetTransactionResultResponse));
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): GetTransactionResultsResponse {
            return GetTransactionResultsResponse.deserialize(bytes);
        }
    }
    export class GetRegisterAtBlockIDRequest extends pb_1.Message {
        constructor(data?: any[] | {
            block_id?: Uint8Array;
            register_owner?: Uint8Array;
            register_controller?: Uint8Array;
            register_key?: Uint8Array;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], []);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("block_id" in data && data.block_id != undefined) {
                    this.block_id = data.block_id;
                }
                if ("register_owner" in data && data.register_owner != undefined) {
                    this.register_owner = data.register_owner;
                }
                if ("register_controller" in data && data.register_controller != undefined) {
                    this.register_controller = data.register_controller;
                }
                if ("register_key" in data && data.register_key != undefined) {
                    this.register_key = data.register_key;
                }
            }
        }
        get block_id() {
            return pb_1.Message.getField(this, 1) as Uint8Array;
        }
        set block_id(value: Uint8Array) {
            pb_1.Message.setField(this, 1, value);
        }
        get register_owner() {
            return pb_1.Message.getField(this, 2) as Uint8Array;
        }
        set register_owner(value: Uint8Array) {
            pb_1.Message.setField(this, 2, value);
        }
        get register_controller() {
            return pb_1.Message.getField(this, 3) as Uint8Array;
        }
        set register_controller(value: Uint8Array) {
            pb_1.Message.setField(this, 3, value);
        }
        get register_key() {
            return pb_1.Message.getField(this, 4) as Uint8Array;
        }
        set register_key(value: Uint8Array) {
            pb_1.Message.setField(this, 4, value);
        }
        static fromObject(data: {
            block_id?: Uint8Array;
            register_owner?: Uint8Array;
            register_controller?: Uint8Array;
            register_key?: Uint8Array;
        }) {
            const message = new GetRegisterAtBlockIDRequest({});
            if (data.block_id != null) {
                message.block_id = data.block_id;
            }
            if (data.register_owner != null) {
                message.register_owner = data.register_owner;
            }
            if (data.register_controller != null) {
                message.register_controller = data.register_controller;
            }
            if (data.register_key != null) {
                message.register_key = data.register_key;
            }
            return message;
        }
        toObject() {
            const data: {
                block_id?: Uint8Array;
                register_owner?: Uint8Array;
                register_controller?: Uint8Array;
                register_key?: Uint8Array;
            } = {};
            if (this.block_id != null) {
                data.block_id = this.block_id;
            }
            if (this.register_owner != null) {
                data.register_owner = this.register_owner;
            }
            if (this.register_controller != null) {
                data.register_controller = this.register_controller;
            }
            if (this.register_key != null) {
                data.register_key = this.register_key;
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.block_id !== undefined)
                writer.writeBytes(1, this.block_id);
            if (this.register_owner !== undefined)
                writer.writeBytes(2, this.register_owner);
            if (this.register_controller !== undefined)
                writer.writeBytes(3, this.register_controller);
            if (this.register_key !== undefined)
                writer.writeBytes(4, this.register_key);
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): GetRegisterAtBlockIDRequest {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new GetRegisterAtBlockIDRequest();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.block_id = reader.readBytes();
                        break;
                    case 2:
                        message.register_owner = reader.readBytes();
                        break;
                    case 3:
                        message.register_controller = reader.readBytes();
                        break;
                    case 4:
                        message.register_key = reader.readBytes();
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): GetRegisterAtBlockIDRequest {
            return GetRegisterAtBlockIDRequest.deserialize(bytes);
        }
    }
    export class GetRegisterAtBlockIDResponse extends pb_1.Message {
        constructor(data?: any[] | {
            value?: Uint8Array;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], []);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("value" in data && data.value != undefined) {
                    this.value = data.value;
                }
            }
        }
        get value() {
            return pb_1.Message.getField(this, 1) as Uint8Array;
        }
        set value(value: Uint8Array) {
            pb_1.Message.setField(this, 1, value);
        }
        static fromObject(data: {
            value?: Uint8Array;
        }) {
            const message = new GetRegisterAtBlockIDResponse({});
            if (data.value != null) {
                message.value = data.value;
            }
            return message;
        }
        toObject() {
            const data: {
                value?: Uint8Array;
            } = {};
            if (this.value != null) {
                data.value = this.value;
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.value !== undefined)
                writer.writeBytes(1, this.value);
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): GetRegisterAtBlockIDResponse {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new GetRegisterAtBlockIDResponse();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.value = reader.readBytes();
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): GetRegisterAtBlockIDResponse {
            return GetRegisterAtBlockIDResponse.deserialize(bytes);
        }
    }
    export class GetLatestBlockHeaderRequest extends pb_1.Message {
        constructor(data?: any[] | {
            is_sealed?: boolean;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], []);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("is_sealed" in data && data.is_sealed != undefined) {
                    this.is_sealed = data.is_sealed;
                }
            }
        }
        get is_sealed() {
            return pb_1.Message.getField(this, 1) as boolean;
        }
        set is_sealed(value: boolean) {
            pb_1.Message.setField(this, 1, value);
        }
        static fromObject(data: {
            is_sealed?: boolean;
        }) {
            const message = new GetLatestBlockHeaderRequest({});
            if (data.is_sealed != null) {
                message.is_sealed = data.is_sealed;
            }
            return message;
        }
        toObject() {
            const data: {
                is_sealed?: boolean;
            } = {};
            if (this.is_sealed != null) {
                data.is_sealed = this.is_sealed;
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.is_sealed !== undefined)
                writer.writeBool(1, this.is_sealed);
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): GetLatestBlockHeaderRequest {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new GetLatestBlockHeaderRequest();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.is_sealed = reader.readBool();
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): GetLatestBlockHeaderRequest {
            return GetLatestBlockHeaderRequest.deserialize(bytes);
        }
    }
    export class GetBlockHeaderByIDRequest extends pb_1.Message {
        constructor(data?: any[] | {
            id?: Uint8Array;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], []);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("id" in data && data.id != undefined) {
                    this.id = data.id;
                }
            }
        }
        get id() {
            return pb_1.Message.getField(this, 1) as Uint8Array;
        }
        set id(value: Uint8Array) {
            pb_1.Message.setField(this, 1, value);
        }
        static fromObject(data: {
            id?: Uint8Array;
        }) {
            const message = new GetBlockHeaderByIDRequest({});
            if (data.id != null) {
                message.id = data.id;
            }
            return message;
        }
        toObject() {
            const data: {
                id?: Uint8Array;
            } = {};
            if (this.id != null) {
                data.id = this.id;
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.id !== undefined)
                writer.writeBytes(1, this.id);
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): GetBlockHeaderByIDRequest {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new GetBlockHeaderByIDRequest();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.id = reader.readBytes();
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): GetBlockHeaderByIDRequest {
            return GetBlockHeaderByIDRequest.deserialize(bytes);
        }
    }
    export class BlockHeaderResponse extends pb_1.Message {
        constructor(data?: any[] | {
            block?: dependency_2.flow.entities.BlockHeader;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], []);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("block" in data && data.block != undefined) {
                    this.block = data.block;
                }
            }
        }
        get block() {
            return pb_1.Message.getWrapperField(this, dependency_2.flow.entities.BlockHeader, 1) as dependency_2.flow.entities.BlockHeader;
        }
        set block(value: dependency_2.flow.entities.BlockHeader) {
            pb_1.Message.setWrapperField(this, 1, value);
        }
        static fromObject(data: {
            block?: ReturnType<typeof dependency_2.flow.entities.BlockHeader.prototype.toObject>;
        }) {
            const message = new BlockHeaderResponse({});
            if (data.block != null) {
                message.block = dependency_2.flow.entities.BlockHeader.fromObject(data.block);
            }
            return message;
        }
        toObject() {
            const data: {
                block?: ReturnType<typeof dependency_2.flow.entities.BlockHeader.prototype.toObject>;
            } = {};
            if (this.block != null) {
                data.block = this.block.toObject();
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.block !== undefined)
                writer.writeMessage(1, this.block, () => this.block.serialize(writer));
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): BlockHeaderResponse {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new BlockHeaderResponse();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        reader.readMessage(message.block, () => message.block = dependency_2.flow.entities.BlockHeader.deserialize(reader));
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): BlockHeaderResponse {
            return BlockHeaderResponse.deserialize(bytes);
        }
    }
    interface GrpcUnaryServiceInterface<P, R> {
        (message: P, metadata: grpc_1.Metadata, options: grpc_1.CallOptions, callback: grpc_1.requestCallback<R>): grpc_1.ClientUnaryCall;
        (message: P, metadata: grpc_1.Metadata, callback: grpc_1.requestCallback<R>): grpc_1.ClientUnaryCall;
        (message: P, options: grpc_1.CallOptions, callback: grpc_1.requestCallback<R>): grpc_1.ClientUnaryCall;
        (message: P, callback: grpc_1.requestCallback<R>): grpc_1.ClientUnaryCall;
    }
    interface GrpcStreamServiceInterface<P, R> {
        (message: P, metadata: grpc_1.Metadata, options?: grpc_1.CallOptions): grpc_1.ClientReadableStream<R>;
        (message: P, options?: grpc_1.CallOptions): grpc_1.ClientReadableStream<R>;
    }
    interface GrpWritableServiceInterface<P, R> {
        (metadata: grpc_1.Metadata, options: grpc_1.CallOptions, callback: grpc_1.requestCallback<R>): grpc_1.ClientWritableStream<P>;
        (metadata: grpc_1.Metadata, callback: grpc_1.requestCallback<R>): grpc_1.ClientWritableStream<P>;
        (options: grpc_1.CallOptions, callback: grpc_1.requestCallback<R>): grpc_1.ClientWritableStream<P>;
        (callback: grpc_1.requestCallback<R>): grpc_1.ClientWritableStream<P>;
    }
    interface GrpcChunkServiceInterface<P, R> {
        (metadata: grpc_1.Metadata, options?: grpc_1.CallOptions): grpc_1.ClientDuplexStream<P, R>;
        (options?: grpc_1.CallOptions): grpc_1.ClientDuplexStream<P, R>;
    }
    interface GrpcPromiseServiceInterface<P, R> {
        (message: P, metadata: grpc_1.Metadata, options?: grpc_1.CallOptions): Promise<R>;
        (message: P, options?: grpc_1.CallOptions): Promise<R>;
    }
    export abstract class UnimplementedExecutionAPIService {
        static definition = {
            Ping: {
                path: "/flow.execution.ExecutionAPI/Ping",
                requestStream: false,
                responseStream: false,
                requestSerialize: (message: PingRequest) => Buffer.from(message.serialize()),
                requestDeserialize: (bytes: Buffer) => PingRequest.deserialize(new Uint8Array(bytes)),
                responseSerialize: (message: PingResponse) => Buffer.from(message.serialize()),
                responseDeserialize: (bytes: Buffer) => PingResponse.deserialize(new Uint8Array(bytes))
            },
            GetAccountAtBlockID: {
                path: "/flow.execution.ExecutionAPI/GetAccountAtBlockID",
                requestStream: false,
                responseStream: false,
                requestSerialize: (message: GetAccountAtBlockIDRequest) => Buffer.from(message.serialize()),
                requestDeserialize: (bytes: Buffer) => GetAccountAtBlockIDRequest.deserialize(new Uint8Array(bytes)),
                responseSerialize: (message: GetAccountAtBlockIDResponse) => Buffer.from(message.serialize()),
                responseDeserialize: (bytes: Buffer) => GetAccountAtBlockIDResponse.deserialize(new Uint8Array(bytes))
            },
            ExecuteScriptAtBlockID: {
                path: "/flow.execution.ExecutionAPI/ExecuteScriptAtBlockID",
                requestStream: false,
                responseStream: false,
                requestSerialize: (message: ExecuteScriptAtBlockIDRequest) => Buffer.from(message.serialize()),
                requestDeserialize: (bytes: Buffer) => ExecuteScriptAtBlockIDRequest.deserialize(new Uint8Array(bytes)),
                responseSerialize: (message: ExecuteScriptAtBlockIDResponse) => Buffer.from(message.serialize()),
                responseDeserialize: (bytes: Buffer) => ExecuteScriptAtBlockIDResponse.deserialize(new Uint8Array(bytes))
            },
            GetEventsForBlockIDs: {
                path: "/flow.execution.ExecutionAPI/GetEventsForBlockIDs",
                requestStream: false,
                responseStream: false,
                requestSerialize: (message: GetEventsForBlockIDsRequest) => Buffer.from(message.serialize()),
                requestDeserialize: (bytes: Buffer) => GetEventsForBlockIDsRequest.deserialize(new Uint8Array(bytes)),
                responseSerialize: (message: GetEventsForBlockIDsResponse) => Buffer.from(message.serialize()),
                responseDeserialize: (bytes: Buffer) => GetEventsForBlockIDsResponse.deserialize(new Uint8Array(bytes))
            },
            GetTransactionResult: {
                path: "/flow.execution.ExecutionAPI/GetTransactionResult",
                requestStream: false,
                responseStream: false,
                requestSerialize: (message: GetTransactionResultRequest) => Buffer.from(message.serialize()),
                requestDeserialize: (bytes: Buffer) => GetTransactionResultRequest.deserialize(new Uint8Array(bytes)),
                responseSerialize: (message: GetTransactionResultResponse) => Buffer.from(message.serialize()),
                responseDeserialize: (bytes: Buffer) => GetTransactionResultResponse.deserialize(new Uint8Array(bytes))
            },
            GetTransactionResultByIndex: {
                path: "/flow.execution.ExecutionAPI/GetTransactionResultByIndex",
                requestStream: false,
                responseStream: false,
                requestSerialize: (message: GetTransactionByIndexRequest) => Buffer.from(message.serialize()),
                requestDeserialize: (bytes: Buffer) => GetTransactionByIndexRequest.deserialize(new Uint8Array(bytes)),
                responseSerialize: (message: GetTransactionResultResponse) => Buffer.from(message.serialize()),
                responseDeserialize: (bytes: Buffer) => GetTransactionResultResponse.deserialize(new Uint8Array(bytes))
            },
            GetTransactionResultsByBlockID: {
                path: "/flow.execution.ExecutionAPI/GetTransactionResultsByBlockID",
                requestStream: false,
                responseStream: false,
                requestSerialize: (message: GetTransactionsByBlockIDRequest) => Buffer.from(message.serialize()),
                requestDeserialize: (bytes: Buffer) => GetTransactionsByBlockIDRequest.deserialize(new Uint8Array(bytes)),
                responseSerialize: (message: GetTransactionResultsResponse) => Buffer.from(message.serialize()),
                responseDeserialize: (bytes: Buffer) => GetTransactionResultsResponse.deserialize(new Uint8Array(bytes))
            },
            GetRegisterAtBlockID: {
                path: "/flow.execution.ExecutionAPI/GetRegisterAtBlockID",
                requestStream: false,
                responseStream: false,
                requestSerialize: (message: GetRegisterAtBlockIDRequest) => Buffer.from(message.serialize()),
                requestDeserialize: (bytes: Buffer) => GetRegisterAtBlockIDRequest.deserialize(new Uint8Array(bytes)),
                responseSerialize: (message: GetRegisterAtBlockIDResponse) => Buffer.from(message.serialize()),
                responseDeserialize: (bytes: Buffer) => GetRegisterAtBlockIDResponse.deserialize(new Uint8Array(bytes))
            },
            GetLatestBlockHeader: {
                path: "/flow.execution.ExecutionAPI/GetLatestBlockHeader",
                requestStream: false,
                responseStream: false,
                requestSerialize: (message: GetLatestBlockHeaderRequest) => Buffer.from(message.serialize()),
                requestDeserialize: (bytes: Buffer) => GetLatestBlockHeaderRequest.deserialize(new Uint8Array(bytes)),
                responseSerialize: (message: BlockHeaderResponse) => Buffer.from(message.serialize()),
                responseDeserialize: (bytes: Buffer) => BlockHeaderResponse.deserialize(new Uint8Array(bytes))
            },
            GetBlockHeaderByID: {
                path: "/flow.execution.ExecutionAPI/GetBlockHeaderByID",
                requestStream: false,
                responseStream: false,
                requestSerialize: (message: GetBlockHeaderByIDRequest) => Buffer.from(message.serialize()),
                requestDeserialize: (bytes: Buffer) => GetBlockHeaderByIDRequest.deserialize(new Uint8Array(bytes)),
                responseSerialize: (message: BlockHeaderResponse) => Buffer.from(message.serialize()),
                responseDeserialize: (bytes: Buffer) => BlockHeaderResponse.deserialize(new Uint8Array(bytes))
            }
        };
        [method: string]: grpc_1.UntypedHandleCall;
        abstract Ping(call: grpc_1.ServerUnaryCall<PingRequest, PingResponse>, callback: grpc_1.sendUnaryData<PingResponse>): void;
        abstract GetAccountAtBlockID(call: grpc_1.ServerUnaryCall<GetAccountAtBlockIDRequest, GetAccountAtBlockIDResponse>, callback: grpc_1.sendUnaryData<GetAccountAtBlockIDResponse>): void;
        abstract ExecuteScriptAtBlockID(call: grpc_1.ServerUnaryCall<ExecuteScriptAtBlockIDRequest, ExecuteScriptAtBlockIDResponse>, callback: grpc_1.sendUnaryData<ExecuteScriptAtBlockIDResponse>): void;
        abstract GetEventsForBlockIDs(call: grpc_1.ServerUnaryCall<GetEventsForBlockIDsRequest, GetEventsForBlockIDsResponse>, callback: grpc_1.sendUnaryData<GetEventsForBlockIDsResponse>): void;
        abstract GetTransactionResult(call: grpc_1.ServerUnaryCall<GetTransactionResultRequest, GetTransactionResultResponse>, callback: grpc_1.sendUnaryData<GetTransactionResultResponse>): void;
        abstract GetTransactionResultByIndex(call: grpc_1.ServerUnaryCall<GetTransactionByIndexRequest, GetTransactionResultResponse>, callback: grpc_1.sendUnaryData<GetTransactionResultResponse>): void;
        abstract GetTransactionResultsByBlockID(call: grpc_1.ServerUnaryCall<GetTransactionsByBlockIDRequest, GetTransactionResultsResponse>, callback: grpc_1.sendUnaryData<GetTransactionResultsResponse>): void;
        abstract GetRegisterAtBlockID(call: grpc_1.ServerUnaryCall<GetRegisterAtBlockIDRequest, GetRegisterAtBlockIDResponse>, callback: grpc_1.sendUnaryData<GetRegisterAtBlockIDResponse>): void;
        abstract GetLatestBlockHeader(call: grpc_1.ServerUnaryCall<GetLatestBlockHeaderRequest, BlockHeaderResponse>, callback: grpc_1.sendUnaryData<BlockHeaderResponse>): void;
        abstract GetBlockHeaderByID(call: grpc_1.ServerUnaryCall<GetBlockHeaderByIDRequest, BlockHeaderResponse>, callback: grpc_1.sendUnaryData<BlockHeaderResponse>): void;
    }
    export class ExecutionAPIClient extends grpc_1.makeGenericClientConstructor(UnimplementedExecutionAPIService.definition, "ExecutionAPI", {}) {
        constructor(address: string, credentials: grpc_1.ChannelCredentials, options?: Partial<grpc_1.ChannelOptions>) {
            super(address, credentials, options);
        }
        Ping: GrpcUnaryServiceInterface<PingRequest, PingResponse> = (message: PingRequest, metadata: grpc_1.Metadata | grpc_1.CallOptions | grpc_1.requestCallback<PingResponse>, options?: grpc_1.CallOptions | grpc_1.requestCallback<PingResponse>, callback?: grpc_1.requestCallback<PingResponse>): grpc_1.ClientUnaryCall => {
            return super.Ping(message, metadata, options, callback);
        };
        GetAccountAtBlockID: GrpcUnaryServiceInterface<GetAccountAtBlockIDRequest, GetAccountAtBlockIDResponse> = (message: GetAccountAtBlockIDRequest, metadata: grpc_1.Metadata | grpc_1.CallOptions | grpc_1.requestCallback<GetAccountAtBlockIDResponse>, options?: grpc_1.CallOptions | grpc_1.requestCallback<GetAccountAtBlockIDResponse>, callback?: grpc_1.requestCallback<GetAccountAtBlockIDResponse>): grpc_1.ClientUnaryCall => {
            return super.GetAccountAtBlockID(message, metadata, options, callback);
        };
        ExecuteScriptAtBlockID: GrpcUnaryServiceInterface<ExecuteScriptAtBlockIDRequest, ExecuteScriptAtBlockIDResponse> = (message: ExecuteScriptAtBlockIDRequest, metadata: grpc_1.Metadata | grpc_1.CallOptions | grpc_1.requestCallback<ExecuteScriptAtBlockIDResponse>, options?: grpc_1.CallOptions | grpc_1.requestCallback<ExecuteScriptAtBlockIDResponse>, callback?: grpc_1.requestCallback<ExecuteScriptAtBlockIDResponse>): grpc_1.ClientUnaryCall => {
            return super.ExecuteScriptAtBlockID(message, metadata, options, callback);
        };
        GetEventsForBlockIDs: GrpcUnaryServiceInterface<GetEventsForBlockIDsRequest, GetEventsForBlockIDsResponse> = (message: GetEventsForBlockIDsRequest, metadata: grpc_1.Metadata | grpc_1.CallOptions | grpc_1.requestCallback<GetEventsForBlockIDsResponse>, options?: grpc_1.CallOptions | grpc_1.requestCallback<GetEventsForBlockIDsResponse>, callback?: grpc_1.requestCallback<GetEventsForBlockIDsResponse>): grpc_1.ClientUnaryCall => {
            return super.GetEventsForBlockIDs(message, metadata, options, callback);
        };
        GetTransactionResult: GrpcUnaryServiceInterface<GetTransactionResultRequest, GetTransactionResultResponse> = (message: GetTransactionResultRequest, metadata: grpc_1.Metadata | grpc_1.CallOptions | grpc_1.requestCallback<GetTransactionResultResponse>, options?: grpc_1.CallOptions | grpc_1.requestCallback<GetTransactionResultResponse>, callback?: grpc_1.requestCallback<GetTransactionResultResponse>): grpc_1.ClientUnaryCall => {
            return super.GetTransactionResult(message, metadata, options, callback);
        };
        GetTransactionResultByIndex: GrpcUnaryServiceInterface<GetTransactionByIndexRequest, GetTransactionResultResponse> = (message: GetTransactionByIndexRequest, metadata: grpc_1.Metadata | grpc_1.CallOptions | grpc_1.requestCallback<GetTransactionResultResponse>, options?: grpc_1.CallOptions | grpc_1.requestCallback<GetTransactionResultResponse>, callback?: grpc_1.requestCallback<GetTransactionResultResponse>): grpc_1.ClientUnaryCall => {
            return super.GetTransactionResultByIndex(message, metadata, options, callback);
        };
        GetTransactionResultsByBlockID: GrpcUnaryServiceInterface<GetTransactionsByBlockIDRequest, GetTransactionResultsResponse> = (message: GetTransactionsByBlockIDRequest, metadata: grpc_1.Metadata | grpc_1.CallOptions | grpc_1.requestCallback<GetTransactionResultsResponse>, options?: grpc_1.CallOptions | grpc_1.requestCallback<GetTransactionResultsResponse>, callback?: grpc_1.requestCallback<GetTransactionResultsResponse>): grpc_1.ClientUnaryCall => {
            return super.GetTransactionResultsByBlockID(message, metadata, options, callback);
        };
        GetRegisterAtBlockID: GrpcUnaryServiceInterface<GetRegisterAtBlockIDRequest, GetRegisterAtBlockIDResponse> = (message: GetRegisterAtBlockIDRequest, metadata: grpc_1.Metadata | grpc_1.CallOptions | grpc_1.requestCallback<GetRegisterAtBlockIDResponse>, options?: grpc_1.CallOptions | grpc_1.requestCallback<GetRegisterAtBlockIDResponse>, callback?: grpc_1.requestCallback<GetRegisterAtBlockIDResponse>): grpc_1.ClientUnaryCall => {
            return super.GetRegisterAtBlockID(message, metadata, options, callback);
        };
        GetLatestBlockHeader: GrpcUnaryServiceInterface<GetLatestBlockHeaderRequest, BlockHeaderResponse> = (message: GetLatestBlockHeaderRequest, metadata: grpc_1.Metadata | grpc_1.CallOptions | grpc_1.requestCallback<BlockHeaderResponse>, options?: grpc_1.CallOptions | grpc_1.requestCallback<BlockHeaderResponse>, callback?: grpc_1.requestCallback<BlockHeaderResponse>): grpc_1.ClientUnaryCall => {
            return super.GetLatestBlockHeader(message, metadata, options, callback);
        };
        GetBlockHeaderByID: GrpcUnaryServiceInterface<GetBlockHeaderByIDRequest, BlockHeaderResponse> = (message: GetBlockHeaderByIDRequest, metadata: grpc_1.Metadata | grpc_1.CallOptions | grpc_1.requestCallback<BlockHeaderResponse>, options?: grpc_1.CallOptions | grpc_1.requestCallback<BlockHeaderResponse>, callback?: grpc_1.requestCallback<BlockHeaderResponse>): grpc_1.ClientUnaryCall => {
            return super.GetBlockHeaderByID(message, metadata, options, callback);
        };
    }
}
