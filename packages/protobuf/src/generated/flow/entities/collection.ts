/**
 * Generated by the protoc-gen-ts.  DO NOT EDIT!
 * compiler version: 3.19.4
 * source: flow/entities/collection.proto
 * git: https://github.com/thesayyn/protoc-gen-ts */
import * as pb_1 from "google-protobuf";
export namespace flow.entities {
    export class Collection extends pb_1.Message {
        constructor(data?: any[] | {
            id?: Uint8Array;
            transaction_ids?: Uint8Array[];
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [2], []);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("id" in data && data.id != undefined) {
                    this.id = data.id;
                }
                if ("transaction_ids" in data && data.transaction_ids != undefined) {
                    this.transaction_ids = data.transaction_ids;
                }
            }
        }
        get id() {
            return pb_1.Message.getField(this, 1) as Uint8Array;
        }
        set id(value: Uint8Array) {
            pb_1.Message.setField(this, 1, value);
        }
        get transaction_ids() {
            return pb_1.Message.getField(this, 2) as Uint8Array[];
        }
        set transaction_ids(value: Uint8Array[]) {
            pb_1.Message.setField(this, 2, value);
        }
        static fromObject(data: {
            id?: Uint8Array;
            transaction_ids?: Uint8Array[];
        }) {
            const message = new Collection({});
            if (data.id != null) {
                message.id = data.id;
            }
            if (data.transaction_ids != null) {
                message.transaction_ids = data.transaction_ids;
            }
            return message;
        }
        toObject() {
            const data: {
                id?: Uint8Array;
                transaction_ids?: Uint8Array[];
            } = {};
            if (this.id != null) {
                data.id = this.id;
            }
            if (this.transaction_ids != null) {
                data.transaction_ids = this.transaction_ids;
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.id !== undefined)
                writer.writeBytes(1, this.id);
            if (this.transaction_ids !== undefined)
                writer.writeRepeatedBytes(2, this.transaction_ids);
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): Collection {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new Collection();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.id = reader.readBytes();
                        break;
                    case 2:
                        pb_1.Message.addToRepeatedField(message, 2, reader.readBytes());
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): Collection {
            return Collection.deserialize(bytes);
        }
    }
    export class CollectionGuarantee extends pb_1.Message {
        constructor(data?: any[] | {
            collection_id?: Uint8Array;
            signatures?: Uint8Array[];
            reference_block_id?: Uint8Array;
            signature?: Uint8Array;
            signer_ids?: Uint8Array[];
            signer_indices?: Uint8Array;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [2, 5], []);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("collection_id" in data && data.collection_id != undefined) {
                    this.collection_id = data.collection_id;
                }
                if ("signatures" in data && data.signatures != undefined) {
                    this.signatures = data.signatures;
                }
                if ("reference_block_id" in data && data.reference_block_id != undefined) {
                    this.reference_block_id = data.reference_block_id;
                }
                if ("signature" in data && data.signature != undefined) {
                    this.signature = data.signature;
                }
                if ("signer_ids" in data && data.signer_ids != undefined) {
                    this.signer_ids = data.signer_ids;
                }
                if ("signer_indices" in data && data.signer_indices != undefined) {
                    this.signer_indices = data.signer_indices;
                }
            }
        }
        get collection_id() {
            return pb_1.Message.getField(this, 1) as Uint8Array;
        }
        set collection_id(value: Uint8Array) {
            pb_1.Message.setField(this, 1, value);
        }
        get signatures() {
            return pb_1.Message.getField(this, 2) as Uint8Array[];
        }
        set signatures(value: Uint8Array[]) {
            pb_1.Message.setField(this, 2, value);
        }
        get reference_block_id() {
            return pb_1.Message.getField(this, 3) as Uint8Array;
        }
        set reference_block_id(value: Uint8Array) {
            pb_1.Message.setField(this, 3, value);
        }
        get signature() {
            return pb_1.Message.getField(this, 4) as Uint8Array;
        }
        set signature(value: Uint8Array) {
            pb_1.Message.setField(this, 4, value);
        }
        get signer_ids() {
            return pb_1.Message.getField(this, 5) as Uint8Array[];
        }
        set signer_ids(value: Uint8Array[]) {
            pb_1.Message.setField(this, 5, value);
        }
        get signer_indices() {
            return pb_1.Message.getField(this, 6) as Uint8Array;
        }
        set signer_indices(value: Uint8Array) {
            pb_1.Message.setField(this, 6, value);
        }
        static fromObject(data: {
            collection_id?: Uint8Array;
            signatures?: Uint8Array[];
            reference_block_id?: Uint8Array;
            signature?: Uint8Array;
            signer_ids?: Uint8Array[];
            signer_indices?: Uint8Array;
        }) {
            const message = new CollectionGuarantee({});
            if (data.collection_id != null) {
                message.collection_id = data.collection_id;
            }
            if (data.signatures != null) {
                message.signatures = data.signatures;
            }
            if (data.reference_block_id != null) {
                message.reference_block_id = data.reference_block_id;
            }
            if (data.signature != null) {
                message.signature = data.signature;
            }
            if (data.signer_ids != null) {
                message.signer_ids = data.signer_ids;
            }
            if (data.signer_indices != null) {
                message.signer_indices = data.signer_indices;
            }
            return message;
        }
        toObject() {
            const data: {
                collection_id?: Uint8Array;
                signatures?: Uint8Array[];
                reference_block_id?: Uint8Array;
                signature?: Uint8Array;
                signer_ids?: Uint8Array[];
                signer_indices?: Uint8Array;
            } = {};
            if (this.collection_id != null) {
                data.collection_id = this.collection_id;
            }
            if (this.signatures != null) {
                data.signatures = this.signatures;
            }
            if (this.reference_block_id != null) {
                data.reference_block_id = this.reference_block_id;
            }
            if (this.signature != null) {
                data.signature = this.signature;
            }
            if (this.signer_ids != null) {
                data.signer_ids = this.signer_ids;
            }
            if (this.signer_indices != null) {
                data.signer_indices = this.signer_indices;
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.collection_id !== undefined)
                writer.writeBytes(1, this.collection_id);
            if (this.signatures !== undefined)
                writer.writeRepeatedBytes(2, this.signatures);
            if (this.reference_block_id !== undefined)
                writer.writeBytes(3, this.reference_block_id);
            if (this.signature !== undefined)
                writer.writeBytes(4, this.signature);
            if (this.signer_ids !== undefined)
                writer.writeRepeatedBytes(5, this.signer_ids);
            if (this.signer_indices !== undefined)
                writer.writeBytes(6, this.signer_indices);
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): CollectionGuarantee {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new CollectionGuarantee();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.collection_id = reader.readBytes();
                        break;
                    case 2:
                        pb_1.Message.addToRepeatedField(message, 2, reader.readBytes());
                        break;
                    case 3:
                        message.reference_block_id = reader.readBytes();
                        break;
                    case 4:
                        message.signature = reader.readBytes();
                        break;
                    case 5:
                        pb_1.Message.addToRepeatedField(message, 5, reader.readBytes());
                        break;
                    case 6:
                        message.signer_indices = reader.readBytes();
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): CollectionGuarantee {
            return CollectionGuarantee.deserialize(bytes);
        }
    }
}
