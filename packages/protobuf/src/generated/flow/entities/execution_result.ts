/**
 * Generated by the protoc-gen-ts.  DO NOT EDIT!
 * compiler version: 3.19.4
 * source: flow/entities/execution_result.proto
 * git: https://github.com/thesayyn/protoc-gen-ts */
import * as pb_1 from "google-protobuf";
export namespace flow.entities {
    export class ExecutionResult extends pb_1.Message {
        constructor(data?: any[] | {
            previous_result_id?: Uint8Array;
            block_id?: Uint8Array;
            chunks?: Chunk[];
            service_events?: ServiceEvent[];
            /** @deprecated*/
            execution_data_id?: Uint8Array;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [3, 4], []);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("previous_result_id" in data && data.previous_result_id != undefined) {
                    this.previous_result_id = data.previous_result_id;
                }
                if ("block_id" in data && data.block_id != undefined) {
                    this.block_id = data.block_id;
                }
                if ("chunks" in data && data.chunks != undefined) {
                    this.chunks = data.chunks;
                }
                if ("service_events" in data && data.service_events != undefined) {
                    this.service_events = data.service_events;
                }
                if ("execution_data_id" in data && data.execution_data_id != undefined) {
                    this.execution_data_id = data.execution_data_id;
                }
            }
        }
        get previous_result_id() {
            return pb_1.Message.getField(this, 1) as Uint8Array;
        }
        set previous_result_id(value: Uint8Array) {
            pb_1.Message.setField(this, 1, value);
        }
        get block_id() {
            return pb_1.Message.getField(this, 2) as Uint8Array;
        }
        set block_id(value: Uint8Array) {
            pb_1.Message.setField(this, 2, value);
        }
        get chunks() {
            return pb_1.Message.getRepeatedWrapperField(this, Chunk, 3) as Chunk[];
        }
        set chunks(value: Chunk[]) {
            pb_1.Message.setRepeatedWrapperField(this, 3, value);
        }
        get service_events() {
            return pb_1.Message.getRepeatedWrapperField(this, ServiceEvent, 4) as ServiceEvent[];
        }
        set service_events(value: ServiceEvent[]) {
            pb_1.Message.setRepeatedWrapperField(this, 4, value);
        }
        /** @deprecated*/
        get execution_data_id() {
            return pb_1.Message.getField(this, 5) as Uint8Array;
        }
        /** @deprecated*/
        set execution_data_id(value: Uint8Array) {
            pb_1.Message.setField(this, 5, value);
        }
        static fromObject(data: {
            previous_result_id?: Uint8Array;
            block_id?: Uint8Array;
            chunks?: ReturnType<typeof Chunk.prototype.toObject>[];
            service_events?: ReturnType<typeof ServiceEvent.prototype.toObject>[];
            execution_data_id?: Uint8Array;
        }) {
            const message = new ExecutionResult({});
            if (data.previous_result_id != null) {
                message.previous_result_id = data.previous_result_id;
            }
            if (data.block_id != null) {
                message.block_id = data.block_id;
            }
            if (data.chunks != null) {
                message.chunks = data.chunks.map(item => Chunk.fromObject(item));
            }
            if (data.service_events != null) {
                message.service_events = data.service_events.map(item => ServiceEvent.fromObject(item));
            }
            if (data.execution_data_id != null) {
                message.execution_data_id = data.execution_data_id;
            }
            return message;
        }
        toObject() {
            const data: {
                previous_result_id?: Uint8Array;
                block_id?: Uint8Array;
                chunks?: ReturnType<typeof Chunk.prototype.toObject>[];
                service_events?: ReturnType<typeof ServiceEvent.prototype.toObject>[];
                execution_data_id?: Uint8Array;
            } = {};
            if (this.previous_result_id != null) {
                data.previous_result_id = this.previous_result_id;
            }
            if (this.block_id != null) {
                data.block_id = this.block_id;
            }
            if (this.chunks != null) {
                data.chunks = this.chunks.map((item: Chunk) => item.toObject());
            }
            if (this.service_events != null) {
                data.service_events = this.service_events.map((item: ServiceEvent) => item.toObject());
            }
            if (this.execution_data_id != null) {
                data.execution_data_id = this.execution_data_id;
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.previous_result_id !== undefined)
                writer.writeBytes(1, this.previous_result_id);
            if (this.block_id !== undefined)
                writer.writeBytes(2, this.block_id);
            if (this.chunks !== undefined)
                writer.writeRepeatedMessage(3, this.chunks, (item: Chunk) => item.serialize(writer));
            if (this.service_events !== undefined)
                writer.writeRepeatedMessage(4, this.service_events, (item: ServiceEvent) => item.serialize(writer));
            if (this.execution_data_id !== undefined)
                writer.writeBytes(5, this.execution_data_id);
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): ExecutionResult {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new ExecutionResult();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.previous_result_id = reader.readBytes();
                        break;
                    case 2:
                        message.block_id = reader.readBytes();
                        break;
                    case 3:
                        reader.readMessage(message.chunks, () => pb_1.Message.addToRepeatedWrapperField(message, 3, Chunk.deserialize(reader), Chunk));
                        break;
                    case 4:
                        reader.readMessage(message.service_events, () => pb_1.Message.addToRepeatedWrapperField(message, 4, ServiceEvent.deserialize(reader), ServiceEvent));
                        break;
                    case 5:
                        message.execution_data_id = reader.readBytes();
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): ExecutionResult {
            return ExecutionResult.deserialize(bytes);
        }
    }
    export class Chunk extends pb_1.Message {
        constructor(data?: any[] | {
            CollectionIndex?: number;
            start_state?: Uint8Array;
            event_collection?: Uint8Array;
            block_id?: Uint8Array;
            total_computation_used?: number;
            number_of_transactions?: number;
            index?: number;
            end_state?: Uint8Array;
            execution_data_id?: Uint8Array;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], []);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("CollectionIndex" in data && data.CollectionIndex != undefined) {
                    this.CollectionIndex = data.CollectionIndex;
                }
                if ("start_state" in data && data.start_state != undefined) {
                    this.start_state = data.start_state;
                }
                if ("event_collection" in data && data.event_collection != undefined) {
                    this.event_collection = data.event_collection;
                }
                if ("block_id" in data && data.block_id != undefined) {
                    this.block_id = data.block_id;
                }
                if ("total_computation_used" in data && data.total_computation_used != undefined) {
                    this.total_computation_used = data.total_computation_used;
                }
                if ("number_of_transactions" in data && data.number_of_transactions != undefined) {
                    this.number_of_transactions = data.number_of_transactions;
                }
                if ("index" in data && data.index != undefined) {
                    this.index = data.index;
                }
                if ("end_state" in data && data.end_state != undefined) {
                    this.end_state = data.end_state;
                }
                if ("execution_data_id" in data && data.execution_data_id != undefined) {
                    this.execution_data_id = data.execution_data_id;
                }
            }
        }
        get CollectionIndex() {
            return pb_1.Message.getField(this, 1) as number;
        }
        set CollectionIndex(value: number) {
            pb_1.Message.setField(this, 1, value);
        }
        get start_state() {
            return pb_1.Message.getField(this, 2) as Uint8Array;
        }
        set start_state(value: Uint8Array) {
            pb_1.Message.setField(this, 2, value);
        }
        get event_collection() {
            return pb_1.Message.getField(this, 3) as Uint8Array;
        }
        set event_collection(value: Uint8Array) {
            pb_1.Message.setField(this, 3, value);
        }
        get block_id() {
            return pb_1.Message.getField(this, 4) as Uint8Array;
        }
        set block_id(value: Uint8Array) {
            pb_1.Message.setField(this, 4, value);
        }
        get total_computation_used() {
            return pb_1.Message.getField(this, 5) as number;
        }
        set total_computation_used(value: number) {
            pb_1.Message.setField(this, 5, value);
        }
        get number_of_transactions() {
            return pb_1.Message.getField(this, 6) as number;
        }
        set number_of_transactions(value: number) {
            pb_1.Message.setField(this, 6, value);
        }
        get index() {
            return pb_1.Message.getField(this, 7) as number;
        }
        set index(value: number) {
            pb_1.Message.setField(this, 7, value);
        }
        get end_state() {
            return pb_1.Message.getField(this, 8) as Uint8Array;
        }
        set end_state(value: Uint8Array) {
            pb_1.Message.setField(this, 8, value);
        }
        get execution_data_id() {
            return pb_1.Message.getField(this, 9) as Uint8Array;
        }
        set execution_data_id(value: Uint8Array) {
            pb_1.Message.setField(this, 9, value);
        }
        static fromObject(data: {
            CollectionIndex?: number;
            start_state?: Uint8Array;
            event_collection?: Uint8Array;
            block_id?: Uint8Array;
            total_computation_used?: number;
            number_of_transactions?: number;
            index?: number;
            end_state?: Uint8Array;
            execution_data_id?: Uint8Array;
        }) {
            const message = new Chunk({});
            if (data.CollectionIndex != null) {
                message.CollectionIndex = data.CollectionIndex;
            }
            if (data.start_state != null) {
                message.start_state = data.start_state;
            }
            if (data.event_collection != null) {
                message.event_collection = data.event_collection;
            }
            if (data.block_id != null) {
                message.block_id = data.block_id;
            }
            if (data.total_computation_used != null) {
                message.total_computation_used = data.total_computation_used;
            }
            if (data.number_of_transactions != null) {
                message.number_of_transactions = data.number_of_transactions;
            }
            if (data.index != null) {
                message.index = data.index;
            }
            if (data.end_state != null) {
                message.end_state = data.end_state;
            }
            if (data.execution_data_id != null) {
                message.execution_data_id = data.execution_data_id;
            }
            return message;
        }
        toObject() {
            const data: {
                CollectionIndex?: number;
                start_state?: Uint8Array;
                event_collection?: Uint8Array;
                block_id?: Uint8Array;
                total_computation_used?: number;
                number_of_transactions?: number;
                index?: number;
                end_state?: Uint8Array;
                execution_data_id?: Uint8Array;
            } = {};
            if (this.CollectionIndex != null) {
                data.CollectionIndex = this.CollectionIndex;
            }
            if (this.start_state != null) {
                data.start_state = this.start_state;
            }
            if (this.event_collection != null) {
                data.event_collection = this.event_collection;
            }
            if (this.block_id != null) {
                data.block_id = this.block_id;
            }
            if (this.total_computation_used != null) {
                data.total_computation_used = this.total_computation_used;
            }
            if (this.number_of_transactions != null) {
                data.number_of_transactions = this.number_of_transactions;
            }
            if (this.index != null) {
                data.index = this.index;
            }
            if (this.end_state != null) {
                data.end_state = this.end_state;
            }
            if (this.execution_data_id != null) {
                data.execution_data_id = this.execution_data_id;
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.CollectionIndex !== undefined)
                writer.writeUint32(1, this.CollectionIndex);
            if (this.start_state !== undefined)
                writer.writeBytes(2, this.start_state);
            if (this.event_collection !== undefined)
                writer.writeBytes(3, this.event_collection);
            if (this.block_id !== undefined)
                writer.writeBytes(4, this.block_id);
            if (this.total_computation_used !== undefined)
                writer.writeUint64(5, this.total_computation_used);
            if (this.number_of_transactions !== undefined)
                writer.writeUint32(6, this.number_of_transactions);
            if (this.index !== undefined)
                writer.writeUint64(7, this.index);
            if (this.end_state !== undefined)
                writer.writeBytes(8, this.end_state);
            if (this.execution_data_id !== undefined)
                writer.writeBytes(9, this.execution_data_id);
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): Chunk {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new Chunk();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.CollectionIndex = reader.readUint32();
                        break;
                    case 2:
                        message.start_state = reader.readBytes();
                        break;
                    case 3:
                        message.event_collection = reader.readBytes();
                        break;
                    case 4:
                        message.block_id = reader.readBytes();
                        break;
                    case 5:
                        message.total_computation_used = reader.readUint64();
                        break;
                    case 6:
                        message.number_of_transactions = reader.readUint32();
                        break;
                    case 7:
                        message.index = reader.readUint64();
                        break;
                    case 8:
                        message.end_state = reader.readBytes();
                        break;
                    case 9:
                        message.execution_data_id = reader.readBytes();
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): Chunk {
            return Chunk.deserialize(bytes);
        }
    }
    export class ServiceEvent extends pb_1.Message {
        constructor(data?: any[] | {
            type?: string;
            payload?: Uint8Array;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], []);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("type" in data && data.type != undefined) {
                    this.type = data.type;
                }
                if ("payload" in data && data.payload != undefined) {
                    this.payload = data.payload;
                }
            }
        }
        get type() {
            return pb_1.Message.getField(this, 1) as string;
        }
        set type(value: string) {
            pb_1.Message.setField(this, 1, value);
        }
        get payload() {
            return pb_1.Message.getField(this, 2) as Uint8Array;
        }
        set payload(value: Uint8Array) {
            pb_1.Message.setField(this, 2, value);
        }
        static fromObject(data: {
            type?: string;
            payload?: Uint8Array;
        }) {
            const message = new ServiceEvent({});
            if (data.type != null) {
                message.type = data.type;
            }
            if (data.payload != null) {
                message.payload = data.payload;
            }
            return message;
        }
        toObject() {
            const data: {
                type?: string;
                payload?: Uint8Array;
            } = {};
            if (this.type != null) {
                data.type = this.type;
            }
            if (this.payload != null) {
                data.payload = this.payload;
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (typeof this.type === "string" && this.type.length)
                writer.writeString(1, this.type);
            if (this.payload !== undefined)
                writer.writeBytes(2, this.payload);
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): ServiceEvent {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new ServiceEvent();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.type = reader.readString();
                        break;
                    case 2:
                        message.payload = reader.readBytes();
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): ServiceEvent {
            return ServiceEvent.deserialize(bytes);
        }
    }
    export class ExecutionReceiptMeta extends pb_1.Message {
        constructor(data?: any[] | {
            executor_id?: Uint8Array;
            result_id?: Uint8Array;
            spocks?: Uint8Array[];
            executor_signature?: Uint8Array;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [3], []);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("executor_id" in data && data.executor_id != undefined) {
                    this.executor_id = data.executor_id;
                }
                if ("result_id" in data && data.result_id != undefined) {
                    this.result_id = data.result_id;
                }
                if ("spocks" in data && data.spocks != undefined) {
                    this.spocks = data.spocks;
                }
                if ("executor_signature" in data && data.executor_signature != undefined) {
                    this.executor_signature = data.executor_signature;
                }
            }
        }
        get executor_id() {
            return pb_1.Message.getField(this, 1) as Uint8Array;
        }
        set executor_id(value: Uint8Array) {
            pb_1.Message.setField(this, 1, value);
        }
        get result_id() {
            return pb_1.Message.getField(this, 2) as Uint8Array;
        }
        set result_id(value: Uint8Array) {
            pb_1.Message.setField(this, 2, value);
        }
        get spocks() {
            return pb_1.Message.getField(this, 3) as Uint8Array[];
        }
        set spocks(value: Uint8Array[]) {
            pb_1.Message.setField(this, 3, value);
        }
        get executor_signature() {
            return pb_1.Message.getField(this, 4) as Uint8Array;
        }
        set executor_signature(value: Uint8Array) {
            pb_1.Message.setField(this, 4, value);
        }
        static fromObject(data: {
            executor_id?: Uint8Array;
            result_id?: Uint8Array;
            spocks?: Uint8Array[];
            executor_signature?: Uint8Array;
        }) {
            const message = new ExecutionReceiptMeta({});
            if (data.executor_id != null) {
                message.executor_id = data.executor_id;
            }
            if (data.result_id != null) {
                message.result_id = data.result_id;
            }
            if (data.spocks != null) {
                message.spocks = data.spocks;
            }
            if (data.executor_signature != null) {
                message.executor_signature = data.executor_signature;
            }
            return message;
        }
        toObject() {
            const data: {
                executor_id?: Uint8Array;
                result_id?: Uint8Array;
                spocks?: Uint8Array[];
                executor_signature?: Uint8Array;
            } = {};
            if (this.executor_id != null) {
                data.executor_id = this.executor_id;
            }
            if (this.result_id != null) {
                data.result_id = this.result_id;
            }
            if (this.spocks != null) {
                data.spocks = this.spocks;
            }
            if (this.executor_signature != null) {
                data.executor_signature = this.executor_signature;
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.executor_id !== undefined)
                writer.writeBytes(1, this.executor_id);
            if (this.result_id !== undefined)
                writer.writeBytes(2, this.result_id);
            if (this.spocks !== undefined)
                writer.writeRepeatedBytes(3, this.spocks);
            if (this.executor_signature !== undefined)
                writer.writeBytes(4, this.executor_signature);
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): ExecutionReceiptMeta {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new ExecutionReceiptMeta();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.executor_id = reader.readBytes();
                        break;
                    case 2:
                        message.result_id = reader.readBytes();
                        break;
                    case 3:
                        pb_1.Message.addToRepeatedField(message, 3, reader.readBytes());
                        break;
                    case 4:
                        message.executor_signature = reader.readBytes();
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): ExecutionReceiptMeta {
            return ExecutionReceiptMeta.deserialize(bytes);
        }
    }
}
