/**
 * Generated by the protoc-gen-ts.  DO NOT EDIT!
 * compiler version: 3.19.4
 * source: flow/entities/event.proto
 * git: https://github.com/thesayyn/protoc-gen-ts */
import * as pb_1 from "google-protobuf";
export namespace flow.entities {
    export class Event extends pb_1.Message {
        constructor(data?: any[] | {
            type?: string;
            transaction_id?: Uint8Array;
            transaction_index?: number;
            event_index?: number;
            payload?: Uint8Array;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], []);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("type" in data && data.type != undefined) {
                    this.type = data.type;
                }
                if ("transaction_id" in data && data.transaction_id != undefined) {
                    this.transaction_id = data.transaction_id;
                }
                if ("transaction_index" in data && data.transaction_index != undefined) {
                    this.transaction_index = data.transaction_index;
                }
                if ("event_index" in data && data.event_index != undefined) {
                    this.event_index = data.event_index;
                }
                if ("payload" in data && data.payload != undefined) {
                    this.payload = data.payload;
                }
            }
        }
        get type() {
            return pb_1.Message.getField(this, 1) as string;
        }
        set type(value: string) {
            pb_1.Message.setField(this, 1, value);
        }
        get transaction_id() {
            return pb_1.Message.getField(this, 2) as Uint8Array;
        }
        set transaction_id(value: Uint8Array) {
            pb_1.Message.setField(this, 2, value);
        }
        get transaction_index() {
            return pb_1.Message.getField(this, 3) as number;
        }
        set transaction_index(value: number) {
            pb_1.Message.setField(this, 3, value);
        }
        get event_index() {
            return pb_1.Message.getField(this, 4) as number;
        }
        set event_index(value: number) {
            pb_1.Message.setField(this, 4, value);
        }
        get payload() {
            return pb_1.Message.getField(this, 5) as Uint8Array;
        }
        set payload(value: Uint8Array) {
            pb_1.Message.setField(this, 5, value);
        }
        static fromObject(data: {
            type?: string;
            transaction_id?: Uint8Array;
            transaction_index?: number;
            event_index?: number;
            payload?: Uint8Array;
        }) {
            const message = new Event({});
            if (data.type != null) {
                message.type = data.type;
            }
            if (data.transaction_id != null) {
                message.transaction_id = data.transaction_id;
            }
            if (data.transaction_index != null) {
                message.transaction_index = data.transaction_index;
            }
            if (data.event_index != null) {
                message.event_index = data.event_index;
            }
            if (data.payload != null) {
                message.payload = data.payload;
            }
            return message;
        }
        toObject() {
            const data: {
                type?: string;
                transaction_id?: Uint8Array;
                transaction_index?: number;
                event_index?: number;
                payload?: Uint8Array;
            } = {};
            if (this.type != null) {
                data.type = this.type;
            }
            if (this.transaction_id != null) {
                data.transaction_id = this.transaction_id;
            }
            if (this.transaction_index != null) {
                data.transaction_index = this.transaction_index;
            }
            if (this.event_index != null) {
                data.event_index = this.event_index;
            }
            if (this.payload != null) {
                data.payload = this.payload;
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (typeof this.type === "string" && this.type.length)
                writer.writeString(1, this.type);
            if (this.transaction_id !== undefined)
                writer.writeBytes(2, this.transaction_id);
            if (this.transaction_index !== undefined)
                writer.writeUint32(3, this.transaction_index);
            if (this.event_index !== undefined)
                writer.writeUint32(4, this.event_index);
            if (this.payload !== undefined)
                writer.writeBytes(5, this.payload);
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): Event {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new Event();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.type = reader.readString();
                        break;
                    case 2:
                        message.transaction_id = reader.readBytes();
                        break;
                    case 3:
                        message.transaction_index = reader.readUint32();
                        break;
                    case 4:
                        message.event_index = reader.readUint32();
                        break;
                    case 5:
                        message.payload = reader.readBytes();
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): Event {
            return Event.deserialize(bytes);
        }
    }
}
