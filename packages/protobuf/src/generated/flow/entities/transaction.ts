/**
 * Generated by the protoc-gen-ts.  DO NOT EDIT!
 * compiler version: 3.19.4
 * source: flow/entities/transaction.proto
 * git: https://github.com/thesayyn/protoc-gen-ts */
import * as dependency_1 from "./event";
import * as pb_1 from "google-protobuf";
export namespace flow.entities {
    export enum TransactionStatus {
        UNKNOWN = 0,
        PENDING = 1,
        FINALIZED = 2,
        EXECUTED = 3,
        SEALED = 4,
        EXPIRED = 5
    }
    export class Transaction extends pb_1.Message {
        constructor(data?: any[] | {
            script?: Uint8Array;
            arguments?: Uint8Array[];
            reference_block_id?: Uint8Array;
            gas_limit?: number;
            proposal_key?: Transaction.ProposalKey;
            payer?: Uint8Array;
            authorizers?: Uint8Array[];
            payload_signatures?: Transaction.Signature[];
            envelope_signatures?: Transaction.Signature[];
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [2, 7, 8, 9], []);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("script" in data && data.script != undefined) {
                    this.script = data.script;
                }
                if ("arguments" in data && data.arguments != undefined) {
                    this.arguments = data.arguments;
                }
                if ("reference_block_id" in data && data.reference_block_id != undefined) {
                    this.reference_block_id = data.reference_block_id;
                }
                if ("gas_limit" in data && data.gas_limit != undefined) {
                    this.gas_limit = data.gas_limit;
                }
                if ("proposal_key" in data && data.proposal_key != undefined) {
                    this.proposal_key = data.proposal_key;
                }
                if ("payer" in data && data.payer != undefined) {
                    this.payer = data.payer;
                }
                if ("authorizers" in data && data.authorizers != undefined) {
                    this.authorizers = data.authorizers;
                }
                if ("payload_signatures" in data && data.payload_signatures != undefined) {
                    this.payload_signatures = data.payload_signatures;
                }
                if ("envelope_signatures" in data && data.envelope_signatures != undefined) {
                    this.envelope_signatures = data.envelope_signatures;
                }
            }
        }
        get script() {
            return pb_1.Message.getField(this, 1) as Uint8Array;
        }
        set script(value: Uint8Array) {
            pb_1.Message.setField(this, 1, value);
        }
        get arguments() {
            return pb_1.Message.getField(this, 2) as Uint8Array[];
        }
        set arguments(value: Uint8Array[]) {
            pb_1.Message.setField(this, 2, value);
        }
        get reference_block_id() {
            return pb_1.Message.getField(this, 3) as Uint8Array;
        }
        set reference_block_id(value: Uint8Array) {
            pb_1.Message.setField(this, 3, value);
        }
        get gas_limit() {
            return pb_1.Message.getField(this, 4) as number;
        }
        set gas_limit(value: number) {
            pb_1.Message.setField(this, 4, value);
        }
        get proposal_key() {
            return pb_1.Message.getWrapperField(this, Transaction.ProposalKey, 5) as Transaction.ProposalKey;
        }
        set proposal_key(value: Transaction.ProposalKey) {
            pb_1.Message.setWrapperField(this, 5, value);
        }
        get payer() {
            return pb_1.Message.getField(this, 6) as Uint8Array;
        }
        set payer(value: Uint8Array) {
            pb_1.Message.setField(this, 6, value);
        }
        get authorizers() {
            return pb_1.Message.getField(this, 7) as Uint8Array[];
        }
        set authorizers(value: Uint8Array[]) {
            pb_1.Message.setField(this, 7, value);
        }
        get payload_signatures() {
            return pb_1.Message.getRepeatedWrapperField(this, Transaction.Signature, 8) as Transaction.Signature[];
        }
        set payload_signatures(value: Transaction.Signature[]) {
            pb_1.Message.setRepeatedWrapperField(this, 8, value);
        }
        get envelope_signatures() {
            return pb_1.Message.getRepeatedWrapperField(this, Transaction.Signature, 9) as Transaction.Signature[];
        }
        set envelope_signatures(value: Transaction.Signature[]) {
            pb_1.Message.setRepeatedWrapperField(this, 9, value);
        }
        static fromObject(data: {
            script?: Uint8Array;
            arguments?: Uint8Array[];
            reference_block_id?: Uint8Array;
            gas_limit?: number;
            proposal_key?: ReturnType<typeof Transaction.ProposalKey.prototype.toObject>;
            payer?: Uint8Array;
            authorizers?: Uint8Array[];
            payload_signatures?: ReturnType<typeof Transaction.Signature.prototype.toObject>[];
            envelope_signatures?: ReturnType<typeof Transaction.Signature.prototype.toObject>[];
        }) {
            const message = new Transaction({});
            if (data.script != null) {
                message.script = data.script;
            }
            if (data.arguments != null) {
                message.arguments = data.arguments;
            }
            if (data.reference_block_id != null) {
                message.reference_block_id = data.reference_block_id;
            }
            if (data.gas_limit != null) {
                message.gas_limit = data.gas_limit;
            }
            if (data.proposal_key != null) {
                message.proposal_key = Transaction.ProposalKey.fromObject(data.proposal_key);
            }
            if (data.payer != null) {
                message.payer = data.payer;
            }
            if (data.authorizers != null) {
                message.authorizers = data.authorizers;
            }
            if (data.payload_signatures != null) {
                message.payload_signatures = data.payload_signatures.map(item => Transaction.Signature.fromObject(item));
            }
            if (data.envelope_signatures != null) {
                message.envelope_signatures = data.envelope_signatures.map(item => Transaction.Signature.fromObject(item));
            }
            return message;
        }
        toObject() {
            const data: {
                script?: Uint8Array;
                arguments?: Uint8Array[];
                reference_block_id?: Uint8Array;
                gas_limit?: number;
                proposal_key?: ReturnType<typeof Transaction.ProposalKey.prototype.toObject>;
                payer?: Uint8Array;
                authorizers?: Uint8Array[];
                payload_signatures?: ReturnType<typeof Transaction.Signature.prototype.toObject>[];
                envelope_signatures?: ReturnType<typeof Transaction.Signature.prototype.toObject>[];
            } = {};
            if (this.script != null) {
                data.script = this.script;
            }
            if (this.arguments != null) {
                data.arguments = this.arguments;
            }
            if (this.reference_block_id != null) {
                data.reference_block_id = this.reference_block_id;
            }
            if (this.gas_limit != null) {
                data.gas_limit = this.gas_limit;
            }
            if (this.proposal_key != null) {
                data.proposal_key = this.proposal_key.toObject();
            }
            if (this.payer != null) {
                data.payer = this.payer;
            }
            if (this.authorizers != null) {
                data.authorizers = this.authorizers;
            }
            if (this.payload_signatures != null) {
                data.payload_signatures = this.payload_signatures.map((item: Transaction.Signature) => item.toObject());
            }
            if (this.envelope_signatures != null) {
                data.envelope_signatures = this.envelope_signatures.map((item: Transaction.Signature) => item.toObject());
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.script !== undefined)
                writer.writeBytes(1, this.script);
            if (this.arguments !== undefined)
                writer.writeRepeatedBytes(2, this.arguments);
            if (this.reference_block_id !== undefined)
                writer.writeBytes(3, this.reference_block_id);
            if (this.gas_limit !== undefined)
                writer.writeUint64(4, this.gas_limit);
            if (this.proposal_key !== undefined)
                writer.writeMessage(5, this.proposal_key, () => this.proposal_key.serialize(writer));
            if (this.payer !== undefined)
                writer.writeBytes(6, this.payer);
            if (this.authorizers !== undefined)
                writer.writeRepeatedBytes(7, this.authorizers);
            if (this.payload_signatures !== undefined)
                writer.writeRepeatedMessage(8, this.payload_signatures, (item: Transaction.Signature) => item.serialize(writer));
            if (this.envelope_signatures !== undefined)
                writer.writeRepeatedMessage(9, this.envelope_signatures, (item: Transaction.Signature) => item.serialize(writer));
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): Transaction {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new Transaction();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.script = reader.readBytes();
                        break;
                    case 2:
                        pb_1.Message.addToRepeatedField(message, 2, reader.readBytes());
                        break;
                    case 3:
                        message.reference_block_id = reader.readBytes();
                        break;
                    case 4:
                        message.gas_limit = reader.readUint64();
                        break;
                    case 5:
                        reader.readMessage(message.proposal_key, () => message.proposal_key = Transaction.ProposalKey.deserialize(reader));
                        break;
                    case 6:
                        message.payer = reader.readBytes();
                        break;
                    case 7:
                        pb_1.Message.addToRepeatedField(message, 7, reader.readBytes());
                        break;
                    case 8:
                        reader.readMessage(message.payload_signatures, () => pb_1.Message.addToRepeatedWrapperField(message, 8, Transaction.Signature.deserialize(reader), Transaction.Signature));
                        break;
                    case 9:
                        reader.readMessage(message.envelope_signatures, () => pb_1.Message.addToRepeatedWrapperField(message, 9, Transaction.Signature.deserialize(reader), Transaction.Signature));
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): Transaction {
            return Transaction.deserialize(bytes);
        }
    }
    export namespace Transaction {
        export class ProposalKey extends pb_1.Message {
            constructor(data?: any[] | {
                address?: Uint8Array;
                key_id?: number;
                sequence_number?: number;
            }) {
                super();
                pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], []);
                if (!Array.isArray(data) && typeof data == "object") {
                    if ("address" in data && data.address != undefined) {
                        this.address = data.address;
                    }
                    if ("key_id" in data && data.key_id != undefined) {
                        this.key_id = data.key_id;
                    }
                    if ("sequence_number" in data && data.sequence_number != undefined) {
                        this.sequence_number = data.sequence_number;
                    }
                }
            }
            get address() {
                return pb_1.Message.getField(this, 1) as Uint8Array;
            }
            set address(value: Uint8Array) {
                pb_1.Message.setField(this, 1, value);
            }
            get key_id() {
                return pb_1.Message.getField(this, 2) as number;
            }
            set key_id(value: number) {
                pb_1.Message.setField(this, 2, value);
            }
            get sequence_number() {
                return pb_1.Message.getField(this, 3) as number;
            }
            set sequence_number(value: number) {
                pb_1.Message.setField(this, 3, value);
            }
            static fromObject(data: {
                address?: Uint8Array;
                key_id?: number;
                sequence_number?: number;
            }) {
                const message = new ProposalKey({});
                if (data.address != null) {
                    message.address = data.address;
                }
                if (data.key_id != null) {
                    message.key_id = data.key_id;
                }
                if (data.sequence_number != null) {
                    message.sequence_number = data.sequence_number;
                }
                return message;
            }
            toObject() {
                const data: {
                    address?: Uint8Array;
                    key_id?: number;
                    sequence_number?: number;
                } = {};
                if (this.address != null) {
                    data.address = this.address;
                }
                if (this.key_id != null) {
                    data.key_id = this.key_id;
                }
                if (this.sequence_number != null) {
                    data.sequence_number = this.sequence_number;
                }
                return data;
            }
            serialize(): Uint8Array;
            serialize(w: pb_1.BinaryWriter): void;
            serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
                const writer = w || new pb_1.BinaryWriter();
                if (this.address !== undefined)
                    writer.writeBytes(1, this.address);
                if (this.key_id !== undefined)
                    writer.writeUint32(2, this.key_id);
                if (this.sequence_number !== undefined)
                    writer.writeUint64(3, this.sequence_number);
                if (!w)
                    return writer.getResultBuffer();
            }
            static deserialize(bytes: Uint8Array | pb_1.BinaryReader): ProposalKey {
                const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new ProposalKey();
                while (reader.nextField()) {
                    if (reader.isEndGroup())
                        break;
                    switch (reader.getFieldNumber()) {
                        case 1:
                            message.address = reader.readBytes();
                            break;
                        case 2:
                            message.key_id = reader.readUint32();
                            break;
                        case 3:
                            message.sequence_number = reader.readUint64();
                            break;
                        default: reader.skipField();
                    }
                }
                return message;
            }
            serializeBinary(): Uint8Array {
                return this.serialize();
            }
            static deserializeBinary(bytes: Uint8Array): ProposalKey {
                return ProposalKey.deserialize(bytes);
            }
        }
        export class Signature extends pb_1.Message {
            constructor(data?: any[] | {
                address?: Uint8Array;
                key_id?: number;
                signature?: Uint8Array;
            }) {
                super();
                pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], []);
                if (!Array.isArray(data) && typeof data == "object") {
                    if ("address" in data && data.address != undefined) {
                        this.address = data.address;
                    }
                    if ("key_id" in data && data.key_id != undefined) {
                        this.key_id = data.key_id;
                    }
                    if ("signature" in data && data.signature != undefined) {
                        this.signature = data.signature;
                    }
                }
            }
            get address() {
                return pb_1.Message.getField(this, 1) as Uint8Array;
            }
            set address(value: Uint8Array) {
                pb_1.Message.setField(this, 1, value);
            }
            get key_id() {
                return pb_1.Message.getField(this, 2) as number;
            }
            set key_id(value: number) {
                pb_1.Message.setField(this, 2, value);
            }
            get signature() {
                return pb_1.Message.getField(this, 3) as Uint8Array;
            }
            set signature(value: Uint8Array) {
                pb_1.Message.setField(this, 3, value);
            }
            static fromObject(data: {
                address?: Uint8Array;
                key_id?: number;
                signature?: Uint8Array;
            }) {
                const message = new Signature({});
                if (data.address != null) {
                    message.address = data.address;
                }
                if (data.key_id != null) {
                    message.key_id = data.key_id;
                }
                if (data.signature != null) {
                    message.signature = data.signature;
                }
                return message;
            }
            toObject() {
                const data: {
                    address?: Uint8Array;
                    key_id?: number;
                    signature?: Uint8Array;
                } = {};
                if (this.address != null) {
                    data.address = this.address;
                }
                if (this.key_id != null) {
                    data.key_id = this.key_id;
                }
                if (this.signature != null) {
                    data.signature = this.signature;
                }
                return data;
            }
            serialize(): Uint8Array;
            serialize(w: pb_1.BinaryWriter): void;
            serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
                const writer = w || new pb_1.BinaryWriter();
                if (this.address !== undefined)
                    writer.writeBytes(1, this.address);
                if (this.key_id !== undefined)
                    writer.writeUint32(2, this.key_id);
                if (this.signature !== undefined)
                    writer.writeBytes(3, this.signature);
                if (!w)
                    return writer.getResultBuffer();
            }
            static deserialize(bytes: Uint8Array | pb_1.BinaryReader): Signature {
                const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new Signature();
                while (reader.nextField()) {
                    if (reader.isEndGroup())
                        break;
                    switch (reader.getFieldNumber()) {
                        case 1:
                            message.address = reader.readBytes();
                            break;
                        case 2:
                            message.key_id = reader.readUint32();
                            break;
                        case 3:
                            message.signature = reader.readBytes();
                            break;
                        default: reader.skipField();
                    }
                }
                return message;
            }
            serializeBinary(): Uint8Array {
                return this.serialize();
            }
            static deserializeBinary(bytes: Uint8Array): Signature {
                return Signature.deserialize(bytes);
            }
        }
    }
}
