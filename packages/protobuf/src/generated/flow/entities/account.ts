/**
 * Generated by the protoc-gen-ts.  DO NOT EDIT!
 * compiler version: 3.19.4
 * source: flow/entities/account.proto
 * git: https://github.com/thesayyn/protoc-gen-ts */
import * as pb_1 from "google-protobuf";
export namespace flow.entities {
    export class Account extends pb_1.Message {
        constructor(data?: any[] | {
            address?: Uint8Array;
            balance?: number;
            code?: Uint8Array;
            keys?: AccountKey[];
            contracts?: Map<string, Uint8Array>;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [4], []);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("address" in data && data.address != undefined) {
                    this.address = data.address;
                }
                if ("balance" in data && data.balance != undefined) {
                    this.balance = data.balance;
                }
                if ("code" in data && data.code != undefined) {
                    this.code = data.code;
                }
                if ("keys" in data && data.keys != undefined) {
                    this.keys = data.keys;
                }
                if ("contracts" in data && data.contracts != undefined) {
                    this.contracts = data.contracts;
                }
            }
            if (!this.contracts)
                this.contracts = new Map();
        }
        get address() {
            return pb_1.Message.getField(this, 1) as Uint8Array;
        }
        set address(value: Uint8Array) {
            pb_1.Message.setField(this, 1, value);
        }
        get balance() {
            return pb_1.Message.getField(this, 2) as number;
        }
        set balance(value: number) {
            pb_1.Message.setField(this, 2, value);
        }
        get code() {
            return pb_1.Message.getField(this, 3) as Uint8Array;
        }
        set code(value: Uint8Array) {
            pb_1.Message.setField(this, 3, value);
        }
        get keys() {
            return pb_1.Message.getRepeatedWrapperField(this, AccountKey, 4) as AccountKey[];
        }
        set keys(value: AccountKey[]) {
            pb_1.Message.setRepeatedWrapperField(this, 4, value);
        }
        get contracts() {
            return pb_1.Message.getField(this, 5) as any as Map<string, Uint8Array>;
        }
        set contracts(value: Map<string, Uint8Array>) {
            pb_1.Message.setField(this, 5, value as any);
        }
        static fromObject(data: {
            address?: Uint8Array;
            balance?: number;
            code?: Uint8Array;
            keys?: ReturnType<typeof AccountKey.prototype.toObject>[];
            contracts?: {
                [key: string]: Uint8Array;
            };
        }) {
            const message = new Account({});
            if (data.address != null) {
                message.address = data.address;
            }
            if (data.balance != null) {
                message.balance = data.balance;
            }
            if (data.code != null) {
                message.code = data.code;
            }
            if (data.keys != null) {
                message.keys = data.keys.map(item => AccountKey.fromObject(item));
            }
            if (typeof data.contracts == "object") {
                message.contracts = new Map(Object.entries(data.contracts));
            }
            return message;
        }
        toObject() {
            const data: {
                address?: Uint8Array;
                balance?: number;
                code?: Uint8Array;
                keys?: ReturnType<typeof AccountKey.prototype.toObject>[];
                contracts?: {
                    [key: string]: Uint8Array;
                };
            } = {};
            if (this.address != null) {
                data.address = this.address;
            }
            if (this.balance != null) {
                data.balance = this.balance;
            }
            if (this.code != null) {
                data.code = this.code;
            }
            if (this.keys != null) {
                data.keys = this.keys.map((item: AccountKey) => item.toObject());
            }
            if (this.contracts.size > 0) {
                data.contracts = Object.fromEntries(this.contracts);
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.address !== undefined)
                writer.writeBytes(1, this.address);
            if (this.balance !== undefined)
                writer.writeUint64(2, this.balance);
            if (this.code !== undefined)
                writer.writeBytes(3, this.code);
            if (this.keys !== undefined)
                writer.writeRepeatedMessage(4, this.keys, (item: AccountKey) => item.serialize(writer));
            for (const [key, value] of this.contracts) {
                writer.writeMessage(5, this.contracts, () => {
                    writer.writeString(1, key);
                    writer.writeBytes(2, value);
                });
            }
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): Account {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new Account();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.address = reader.readBytes();
                        break;
                    case 2:
                        message.balance = reader.readUint64();
                        break;
                    case 3:
                        message.code = reader.readBytes();
                        break;
                    case 4:
                        reader.readMessage(message.keys, () => pb_1.Message.addToRepeatedWrapperField(message, 4, AccountKey.deserialize(reader), AccountKey));
                        break;
                    case 5:
                        reader.readMessage(message, () => pb_1.Map.deserializeBinary(message.contracts as any, reader, reader.readString, reader.readBytes));
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): Account {
            return Account.deserialize(bytes);
        }
    }
    export class AccountKey extends pb_1.Message {
        constructor(data?: any[] | {
            index?: number;
            public_key?: Uint8Array;
            sign_algo?: number;
            hash_algo?: number;
            weight?: number;
            sequence_number?: number;
            revoked?: boolean;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], []);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("index" in data && data.index != undefined) {
                    this.index = data.index;
                }
                if ("public_key" in data && data.public_key != undefined) {
                    this.public_key = data.public_key;
                }
                if ("sign_algo" in data && data.sign_algo != undefined) {
                    this.sign_algo = data.sign_algo;
                }
                if ("hash_algo" in data && data.hash_algo != undefined) {
                    this.hash_algo = data.hash_algo;
                }
                if ("weight" in data && data.weight != undefined) {
                    this.weight = data.weight;
                }
                if ("sequence_number" in data && data.sequence_number != undefined) {
                    this.sequence_number = data.sequence_number;
                }
                if ("revoked" in data && data.revoked != undefined) {
                    this.revoked = data.revoked;
                }
            }
        }
        get index() {
            return pb_1.Message.getField(this, 1) as number;
        }
        set index(value: number) {
            pb_1.Message.setField(this, 1, value);
        }
        get public_key() {
            return pb_1.Message.getField(this, 2) as Uint8Array;
        }
        set public_key(value: Uint8Array) {
            pb_1.Message.setField(this, 2, value);
        }
        get sign_algo() {
            return pb_1.Message.getField(this, 3) as number;
        }
        set sign_algo(value: number) {
            pb_1.Message.setField(this, 3, value);
        }
        get hash_algo() {
            return pb_1.Message.getField(this, 4) as number;
        }
        set hash_algo(value: number) {
            pb_1.Message.setField(this, 4, value);
        }
        get weight() {
            return pb_1.Message.getField(this, 5) as number;
        }
        set weight(value: number) {
            pb_1.Message.setField(this, 5, value);
        }
        get sequence_number() {
            return pb_1.Message.getField(this, 6) as number;
        }
        set sequence_number(value: number) {
            pb_1.Message.setField(this, 6, value);
        }
        get revoked() {
            return pb_1.Message.getField(this, 7) as boolean;
        }
        set revoked(value: boolean) {
            pb_1.Message.setField(this, 7, value);
        }
        static fromObject(data: {
            index?: number;
            public_key?: Uint8Array;
            sign_algo?: number;
            hash_algo?: number;
            weight?: number;
            sequence_number?: number;
            revoked?: boolean;
        }) {
            const message = new AccountKey({});
            if (data.index != null) {
                message.index = data.index;
            }
            if (data.public_key != null) {
                message.public_key = data.public_key;
            }
            if (data.sign_algo != null) {
                message.sign_algo = data.sign_algo;
            }
            if (data.hash_algo != null) {
                message.hash_algo = data.hash_algo;
            }
            if (data.weight != null) {
                message.weight = data.weight;
            }
            if (data.sequence_number != null) {
                message.sequence_number = data.sequence_number;
            }
            if (data.revoked != null) {
                message.revoked = data.revoked;
            }
            return message;
        }
        toObject() {
            const data: {
                index?: number;
                public_key?: Uint8Array;
                sign_algo?: number;
                hash_algo?: number;
                weight?: number;
                sequence_number?: number;
                revoked?: boolean;
            } = {};
            if (this.index != null) {
                data.index = this.index;
            }
            if (this.public_key != null) {
                data.public_key = this.public_key;
            }
            if (this.sign_algo != null) {
                data.sign_algo = this.sign_algo;
            }
            if (this.hash_algo != null) {
                data.hash_algo = this.hash_algo;
            }
            if (this.weight != null) {
                data.weight = this.weight;
            }
            if (this.sequence_number != null) {
                data.sequence_number = this.sequence_number;
            }
            if (this.revoked != null) {
                data.revoked = this.revoked;
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.index !== undefined)
                writer.writeUint32(1, this.index);
            if (this.public_key !== undefined)
                writer.writeBytes(2, this.public_key);
            if (this.sign_algo !== undefined)
                writer.writeUint32(3, this.sign_algo);
            if (this.hash_algo !== undefined)
                writer.writeUint32(4, this.hash_algo);
            if (this.weight !== undefined)
                writer.writeUint32(5, this.weight);
            if (this.sequence_number !== undefined)
                writer.writeUint32(6, this.sequence_number);
            if (this.revoked !== undefined)
                writer.writeBool(7, this.revoked);
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): AccountKey {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new AccountKey();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.index = reader.readUint32();
                        break;
                    case 2:
                        message.public_key = reader.readBytes();
                        break;
                    case 3:
                        message.sign_algo = reader.readUint32();
                        break;
                    case 4:
                        message.hash_algo = reader.readUint32();
                        break;
                    case 5:
                        message.weight = reader.readUint32();
                        break;
                    case 6:
                        message.sequence_number = reader.readUint32();
                        break;
                    case 7:
                        message.revoked = reader.readBool();
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): AccountKey {
            return AccountKey.deserialize(bytes);
        }
    }
}
