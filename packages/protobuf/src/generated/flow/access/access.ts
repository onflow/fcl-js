/**
 * Generated by the protoc-gen-ts.  DO NOT EDIT!
 * compiler version: 3.19.4
 * source: flow/access/access.proto
 * git: https://github.com/thesayyn/protoc-gen-ts */
import * as dependency_1 from "./../entities/account";
import * as dependency_2 from "./../entities/block_header";
import * as dependency_3 from "./../entities/block";
import * as dependency_4 from "./../entities/collection";
import * as dependency_5 from "./../entities/event";
import * as dependency_6 from "./../entities/execution_result";
import * as dependency_7 from "./../entities/transaction";
import * as dependency_8 from "./../../google/protobuf/timestamp";
import * as pb_1 from "google-protobuf";
import * as grpc_1 from "@grpc/grpc-js";
export namespace flow.access {
    export class PingRequest extends pb_1.Message {
        constructor(data?: any[] | {}) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], []);
            if (!Array.isArray(data) && typeof data == "object") { }
        }
        static fromObject(data: {}) {
            const message = new PingRequest({});
            return message;
        }
        toObject() {
            const data: {} = {};
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): PingRequest {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new PingRequest();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): PingRequest {
            return PingRequest.deserialize(bytes);
        }
    }
    export class PingResponse extends pb_1.Message {
        constructor(data?: any[] | {}) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], []);
            if (!Array.isArray(data) && typeof data == "object") { }
        }
        static fromObject(data: {}) {
            const message = new PingResponse({});
            return message;
        }
        toObject() {
            const data: {} = {};
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): PingResponse {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new PingResponse();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): PingResponse {
            return PingResponse.deserialize(bytes);
        }
    }
    export class GetLatestBlockHeaderRequest extends pb_1.Message {
        constructor(data?: any[] | {
            is_sealed?: boolean;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], []);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("is_sealed" in data && data.is_sealed != undefined) {
                    this.is_sealed = data.is_sealed;
                }
            }
        }
        get is_sealed() {
            return pb_1.Message.getField(this, 1) as boolean;
        }
        set is_sealed(value: boolean) {
            pb_1.Message.setField(this, 1, value);
        }
        static fromObject(data: {
            is_sealed?: boolean;
        }) {
            const message = new GetLatestBlockHeaderRequest({});
            if (data.is_sealed != null) {
                message.is_sealed = data.is_sealed;
            }
            return message;
        }
        toObject() {
            const data: {
                is_sealed?: boolean;
            } = {};
            if (this.is_sealed != null) {
                data.is_sealed = this.is_sealed;
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.is_sealed !== undefined)
                writer.writeBool(1, this.is_sealed);
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): GetLatestBlockHeaderRequest {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new GetLatestBlockHeaderRequest();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.is_sealed = reader.readBool();
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): GetLatestBlockHeaderRequest {
            return GetLatestBlockHeaderRequest.deserialize(bytes);
        }
    }
    export class GetBlockHeaderByIDRequest extends pb_1.Message {
        constructor(data?: any[] | {
            id?: Uint8Array;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], []);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("id" in data && data.id != undefined) {
                    this.id = data.id;
                }
            }
        }
        get id() {
            return pb_1.Message.getField(this, 1) as Uint8Array;
        }
        set id(value: Uint8Array) {
            pb_1.Message.setField(this, 1, value);
        }
        static fromObject(data: {
            id?: Uint8Array;
        }) {
            const message = new GetBlockHeaderByIDRequest({});
            if (data.id != null) {
                message.id = data.id;
            }
            return message;
        }
        toObject() {
            const data: {
                id?: Uint8Array;
            } = {};
            if (this.id != null) {
                data.id = this.id;
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.id !== undefined)
                writer.writeBytes(1, this.id);
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): GetBlockHeaderByIDRequest {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new GetBlockHeaderByIDRequest();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.id = reader.readBytes();
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): GetBlockHeaderByIDRequest {
            return GetBlockHeaderByIDRequest.deserialize(bytes);
        }
    }
    export class GetBlockHeaderByHeightRequest extends pb_1.Message {
        constructor(data?: any[] | {
            height?: number;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], []);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("height" in data && data.height != undefined) {
                    this.height = data.height;
                }
            }
        }
        get height() {
            return pb_1.Message.getField(this, 1) as number;
        }
        set height(value: number) {
            pb_1.Message.setField(this, 1, value);
        }
        static fromObject(data: {
            height?: number;
        }) {
            const message = new GetBlockHeaderByHeightRequest({});
            if (data.height != null) {
                message.height = data.height;
            }
            return message;
        }
        toObject() {
            const data: {
                height?: number;
            } = {};
            if (this.height != null) {
                data.height = this.height;
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.height !== undefined)
                writer.writeUint64(1, this.height);
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): GetBlockHeaderByHeightRequest {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new GetBlockHeaderByHeightRequest();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.height = reader.readUint64();
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): GetBlockHeaderByHeightRequest {
            return GetBlockHeaderByHeightRequest.deserialize(bytes);
        }
    }
    export class BlockHeaderResponse extends pb_1.Message {
        constructor(data?: any[] | {
            block?: dependency_2.flow.entities.BlockHeader;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], []);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("block" in data && data.block != undefined) {
                    this.block = data.block;
                }
            }
        }
        get block() {
            return pb_1.Message.getWrapperField(this, dependency_2.flow.entities.BlockHeader, 1) as dependency_2.flow.entities.BlockHeader;
        }
        set block(value: dependency_2.flow.entities.BlockHeader) {
            pb_1.Message.setWrapperField(this, 1, value);
        }
        static fromObject(data: {
            block?: ReturnType<typeof dependency_2.flow.entities.BlockHeader.prototype.toObject>;
        }) {
            const message = new BlockHeaderResponse({});
            if (data.block != null) {
                message.block = dependency_2.flow.entities.BlockHeader.fromObject(data.block);
            }
            return message;
        }
        toObject() {
            const data: {
                block?: ReturnType<typeof dependency_2.flow.entities.BlockHeader.prototype.toObject>;
            } = {};
            if (this.block != null) {
                data.block = this.block.toObject();
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.block !== undefined)
                writer.writeMessage(1, this.block, () => this.block.serialize(writer));
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): BlockHeaderResponse {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new BlockHeaderResponse();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        reader.readMessage(message.block, () => message.block = dependency_2.flow.entities.BlockHeader.deserialize(reader));
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): BlockHeaderResponse {
            return BlockHeaderResponse.deserialize(bytes);
        }
    }
    export class GetLatestBlockRequest extends pb_1.Message {
        constructor(data?: any[] | {
            is_sealed?: boolean;
            full_block_response?: boolean;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], []);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("is_sealed" in data && data.is_sealed != undefined) {
                    this.is_sealed = data.is_sealed;
                }
                if ("full_block_response" in data && data.full_block_response != undefined) {
                    this.full_block_response = data.full_block_response;
                }
            }
        }
        get is_sealed() {
            return pb_1.Message.getField(this, 1) as boolean;
        }
        set is_sealed(value: boolean) {
            pb_1.Message.setField(this, 1, value);
        }
        get full_block_response() {
            return pb_1.Message.getField(this, 2) as boolean;
        }
        set full_block_response(value: boolean) {
            pb_1.Message.setField(this, 2, value);
        }
        static fromObject(data: {
            is_sealed?: boolean;
            full_block_response?: boolean;
        }) {
            const message = new GetLatestBlockRequest({});
            if (data.is_sealed != null) {
                message.is_sealed = data.is_sealed;
            }
            if (data.full_block_response != null) {
                message.full_block_response = data.full_block_response;
            }
            return message;
        }
        toObject() {
            const data: {
                is_sealed?: boolean;
                full_block_response?: boolean;
            } = {};
            if (this.is_sealed != null) {
                data.is_sealed = this.is_sealed;
            }
            if (this.full_block_response != null) {
                data.full_block_response = this.full_block_response;
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.is_sealed !== undefined)
                writer.writeBool(1, this.is_sealed);
            if (this.full_block_response !== undefined)
                writer.writeBool(2, this.full_block_response);
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): GetLatestBlockRequest {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new GetLatestBlockRequest();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.is_sealed = reader.readBool();
                        break;
                    case 2:
                        message.full_block_response = reader.readBool();
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): GetLatestBlockRequest {
            return GetLatestBlockRequest.deserialize(bytes);
        }
    }
    export class GetBlockByIDRequest extends pb_1.Message {
        constructor(data?: any[] | {
            id?: Uint8Array;
            full_block_response?: boolean;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], []);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("id" in data && data.id != undefined) {
                    this.id = data.id;
                }
                if ("full_block_response" in data && data.full_block_response != undefined) {
                    this.full_block_response = data.full_block_response;
                }
            }
        }
        get id() {
            return pb_1.Message.getField(this, 1) as Uint8Array;
        }
        set id(value: Uint8Array) {
            pb_1.Message.setField(this, 1, value);
        }
        get full_block_response() {
            return pb_1.Message.getField(this, 2) as boolean;
        }
        set full_block_response(value: boolean) {
            pb_1.Message.setField(this, 2, value);
        }
        static fromObject(data: {
            id?: Uint8Array;
            full_block_response?: boolean;
        }) {
            const message = new GetBlockByIDRequest({});
            if (data.id != null) {
                message.id = data.id;
            }
            if (data.full_block_response != null) {
                message.full_block_response = data.full_block_response;
            }
            return message;
        }
        toObject() {
            const data: {
                id?: Uint8Array;
                full_block_response?: boolean;
            } = {};
            if (this.id != null) {
                data.id = this.id;
            }
            if (this.full_block_response != null) {
                data.full_block_response = this.full_block_response;
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.id !== undefined)
                writer.writeBytes(1, this.id);
            if (this.full_block_response !== undefined)
                writer.writeBool(2, this.full_block_response);
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): GetBlockByIDRequest {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new GetBlockByIDRequest();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.id = reader.readBytes();
                        break;
                    case 2:
                        message.full_block_response = reader.readBool();
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): GetBlockByIDRequest {
            return GetBlockByIDRequest.deserialize(bytes);
        }
    }
    export class GetBlockByHeightRequest extends pb_1.Message {
        constructor(data?: any[] | {
            height?: number;
            full_block_response?: boolean;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], []);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("height" in data && data.height != undefined) {
                    this.height = data.height;
                }
                if ("full_block_response" in data && data.full_block_response != undefined) {
                    this.full_block_response = data.full_block_response;
                }
            }
        }
        get height() {
            return pb_1.Message.getField(this, 1) as number;
        }
        set height(value: number) {
            pb_1.Message.setField(this, 1, value);
        }
        get full_block_response() {
            return pb_1.Message.getField(this, 2) as boolean;
        }
        set full_block_response(value: boolean) {
            pb_1.Message.setField(this, 2, value);
        }
        static fromObject(data: {
            height?: number;
            full_block_response?: boolean;
        }) {
            const message = new GetBlockByHeightRequest({});
            if (data.height != null) {
                message.height = data.height;
            }
            if (data.full_block_response != null) {
                message.full_block_response = data.full_block_response;
            }
            return message;
        }
        toObject() {
            const data: {
                height?: number;
                full_block_response?: boolean;
            } = {};
            if (this.height != null) {
                data.height = this.height;
            }
            if (this.full_block_response != null) {
                data.full_block_response = this.full_block_response;
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.height !== undefined)
                writer.writeUint64(1, this.height);
            if (this.full_block_response !== undefined)
                writer.writeBool(2, this.full_block_response);
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): GetBlockByHeightRequest {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new GetBlockByHeightRequest();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.height = reader.readUint64();
                        break;
                    case 2:
                        message.full_block_response = reader.readBool();
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): GetBlockByHeightRequest {
            return GetBlockByHeightRequest.deserialize(bytes);
        }
    }
    export class BlockResponse extends pb_1.Message {
        constructor(data?: any[] | {
            block?: dependency_3.flow.entities.Block;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], []);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("block" in data && data.block != undefined) {
                    this.block = data.block;
                }
            }
        }
        get block() {
            return pb_1.Message.getWrapperField(this, dependency_3.flow.entities.Block, 1) as dependency_3.flow.entities.Block;
        }
        set block(value: dependency_3.flow.entities.Block) {
            pb_1.Message.setWrapperField(this, 1, value);
        }
        static fromObject(data: {
            block?: ReturnType<typeof dependency_3.flow.entities.Block.prototype.toObject>;
        }) {
            const message = new BlockResponse({});
            if (data.block != null) {
                message.block = dependency_3.flow.entities.Block.fromObject(data.block);
            }
            return message;
        }
        toObject() {
            const data: {
                block?: ReturnType<typeof dependency_3.flow.entities.Block.prototype.toObject>;
            } = {};
            if (this.block != null) {
                data.block = this.block.toObject();
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.block !== undefined)
                writer.writeMessage(1, this.block, () => this.block.serialize(writer));
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): BlockResponse {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new BlockResponse();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        reader.readMessage(message.block, () => message.block = dependency_3.flow.entities.Block.deserialize(reader));
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): BlockResponse {
            return BlockResponse.deserialize(bytes);
        }
    }
    export class GetCollectionByIDRequest extends pb_1.Message {
        constructor(data?: any[] | {
            id?: Uint8Array;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], []);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("id" in data && data.id != undefined) {
                    this.id = data.id;
                }
            }
        }
        get id() {
            return pb_1.Message.getField(this, 1) as Uint8Array;
        }
        set id(value: Uint8Array) {
            pb_1.Message.setField(this, 1, value);
        }
        static fromObject(data: {
            id?: Uint8Array;
        }) {
            const message = new GetCollectionByIDRequest({});
            if (data.id != null) {
                message.id = data.id;
            }
            return message;
        }
        toObject() {
            const data: {
                id?: Uint8Array;
            } = {};
            if (this.id != null) {
                data.id = this.id;
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.id !== undefined)
                writer.writeBytes(1, this.id);
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): GetCollectionByIDRequest {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new GetCollectionByIDRequest();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.id = reader.readBytes();
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): GetCollectionByIDRequest {
            return GetCollectionByIDRequest.deserialize(bytes);
        }
    }
    export class CollectionResponse extends pb_1.Message {
        constructor(data?: any[] | {
            collection?: dependency_4.flow.entities.Collection;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], []);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("collection" in data && data.collection != undefined) {
                    this.collection = data.collection;
                }
            }
        }
        get collection() {
            return pb_1.Message.getWrapperField(this, dependency_4.flow.entities.Collection, 1) as dependency_4.flow.entities.Collection;
        }
        set collection(value: dependency_4.flow.entities.Collection) {
            pb_1.Message.setWrapperField(this, 1, value);
        }
        static fromObject(data: {
            collection?: ReturnType<typeof dependency_4.flow.entities.Collection.prototype.toObject>;
        }) {
            const message = new CollectionResponse({});
            if (data.collection != null) {
                message.collection = dependency_4.flow.entities.Collection.fromObject(data.collection);
            }
            return message;
        }
        toObject() {
            const data: {
                collection?: ReturnType<typeof dependency_4.flow.entities.Collection.prototype.toObject>;
            } = {};
            if (this.collection != null) {
                data.collection = this.collection.toObject();
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.collection !== undefined)
                writer.writeMessage(1, this.collection, () => this.collection.serialize(writer));
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): CollectionResponse {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new CollectionResponse();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        reader.readMessage(message.collection, () => message.collection = dependency_4.flow.entities.Collection.deserialize(reader));
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): CollectionResponse {
            return CollectionResponse.deserialize(bytes);
        }
    }
    export class SendTransactionRequest extends pb_1.Message {
        constructor(data?: any[] | {
            transaction?: dependency_7.flow.entities.Transaction;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], []);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("transaction" in data && data.transaction != undefined) {
                    this.transaction = data.transaction;
                }
            }
        }
        get transaction() {
            return pb_1.Message.getWrapperField(this, dependency_7.flow.entities.Transaction, 1) as dependency_7.flow.entities.Transaction;
        }
        set transaction(value: dependency_7.flow.entities.Transaction) {
            pb_1.Message.setWrapperField(this, 1, value);
        }
        static fromObject(data: {
            transaction?: ReturnType<typeof dependency_7.flow.entities.Transaction.prototype.toObject>;
        }) {
            const message = new SendTransactionRequest({});
            if (data.transaction != null) {
                message.transaction = dependency_7.flow.entities.Transaction.fromObject(data.transaction);
            }
            return message;
        }
        toObject() {
            const data: {
                transaction?: ReturnType<typeof dependency_7.flow.entities.Transaction.prototype.toObject>;
            } = {};
            if (this.transaction != null) {
                data.transaction = this.transaction.toObject();
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.transaction !== undefined)
                writer.writeMessage(1, this.transaction, () => this.transaction.serialize(writer));
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): SendTransactionRequest {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new SendTransactionRequest();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        reader.readMessage(message.transaction, () => message.transaction = dependency_7.flow.entities.Transaction.deserialize(reader));
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): SendTransactionRequest {
            return SendTransactionRequest.deserialize(bytes);
        }
    }
    export class SendTransactionResponse extends pb_1.Message {
        constructor(data?: any[] | {
            id?: Uint8Array;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], []);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("id" in data && data.id != undefined) {
                    this.id = data.id;
                }
            }
        }
        get id() {
            return pb_1.Message.getField(this, 1) as Uint8Array;
        }
        set id(value: Uint8Array) {
            pb_1.Message.setField(this, 1, value);
        }
        static fromObject(data: {
            id?: Uint8Array;
        }) {
            const message = new SendTransactionResponse({});
            if (data.id != null) {
                message.id = data.id;
            }
            return message;
        }
        toObject() {
            const data: {
                id?: Uint8Array;
            } = {};
            if (this.id != null) {
                data.id = this.id;
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.id !== undefined)
                writer.writeBytes(1, this.id);
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): SendTransactionResponse {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new SendTransactionResponse();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.id = reader.readBytes();
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): SendTransactionResponse {
            return SendTransactionResponse.deserialize(bytes);
        }
    }
    export class GetTransactionRequest extends pb_1.Message {
        constructor(data?: any[] | {
            id?: Uint8Array;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], []);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("id" in data && data.id != undefined) {
                    this.id = data.id;
                }
            }
        }
        get id() {
            return pb_1.Message.getField(this, 1) as Uint8Array;
        }
        set id(value: Uint8Array) {
            pb_1.Message.setField(this, 1, value);
        }
        static fromObject(data: {
            id?: Uint8Array;
        }) {
            const message = new GetTransactionRequest({});
            if (data.id != null) {
                message.id = data.id;
            }
            return message;
        }
        toObject() {
            const data: {
                id?: Uint8Array;
            } = {};
            if (this.id != null) {
                data.id = this.id;
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.id !== undefined)
                writer.writeBytes(1, this.id);
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): GetTransactionRequest {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new GetTransactionRequest();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.id = reader.readBytes();
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): GetTransactionRequest {
            return GetTransactionRequest.deserialize(bytes);
        }
    }
    export class GetTransactionByIndexRequest extends pb_1.Message {
        constructor(data?: any[] | {
            block_id?: Uint8Array;
            index?: number;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], []);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("block_id" in data && data.block_id != undefined) {
                    this.block_id = data.block_id;
                }
                if ("index" in data && data.index != undefined) {
                    this.index = data.index;
                }
            }
        }
        get block_id() {
            return pb_1.Message.getField(this, 1) as Uint8Array;
        }
        set block_id(value: Uint8Array) {
            pb_1.Message.setField(this, 1, value);
        }
        get index() {
            return pb_1.Message.getField(this, 2) as number;
        }
        set index(value: number) {
            pb_1.Message.setField(this, 2, value);
        }
        static fromObject(data: {
            block_id?: Uint8Array;
            index?: number;
        }) {
            const message = new GetTransactionByIndexRequest({});
            if (data.block_id != null) {
                message.block_id = data.block_id;
            }
            if (data.index != null) {
                message.index = data.index;
            }
            return message;
        }
        toObject() {
            const data: {
                block_id?: Uint8Array;
                index?: number;
            } = {};
            if (this.block_id != null) {
                data.block_id = this.block_id;
            }
            if (this.index != null) {
                data.index = this.index;
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.block_id !== undefined)
                writer.writeBytes(1, this.block_id);
            if (this.index !== undefined)
                writer.writeUint32(2, this.index);
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): GetTransactionByIndexRequest {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new GetTransactionByIndexRequest();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.block_id = reader.readBytes();
                        break;
                    case 2:
                        message.index = reader.readUint32();
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): GetTransactionByIndexRequest {
            return GetTransactionByIndexRequest.deserialize(bytes);
        }
    }
    export class GetTransactionsByBlockIDRequest extends pb_1.Message {
        constructor(data?: any[] | {
            block_id?: Uint8Array;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], []);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("block_id" in data && data.block_id != undefined) {
                    this.block_id = data.block_id;
                }
            }
        }
        get block_id() {
            return pb_1.Message.getField(this, 1) as Uint8Array;
        }
        set block_id(value: Uint8Array) {
            pb_1.Message.setField(this, 1, value);
        }
        static fromObject(data: {
            block_id?: Uint8Array;
        }) {
            const message = new GetTransactionsByBlockIDRequest({});
            if (data.block_id != null) {
                message.block_id = data.block_id;
            }
            return message;
        }
        toObject() {
            const data: {
                block_id?: Uint8Array;
            } = {};
            if (this.block_id != null) {
                data.block_id = this.block_id;
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.block_id !== undefined)
                writer.writeBytes(1, this.block_id);
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): GetTransactionsByBlockIDRequest {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new GetTransactionsByBlockIDRequest();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.block_id = reader.readBytes();
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): GetTransactionsByBlockIDRequest {
            return GetTransactionsByBlockIDRequest.deserialize(bytes);
        }
    }
    export class TransactionResultsResponse extends pb_1.Message {
        constructor(data?: any[] | {
            transaction_results?: TransactionResultResponse[];
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [1], []);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("transaction_results" in data && data.transaction_results != undefined) {
                    this.transaction_results = data.transaction_results;
                }
            }
        }
        get transaction_results() {
            return pb_1.Message.getRepeatedWrapperField(this, TransactionResultResponse, 1) as TransactionResultResponse[];
        }
        set transaction_results(value: TransactionResultResponse[]) {
            pb_1.Message.setRepeatedWrapperField(this, 1, value);
        }
        static fromObject(data: {
            transaction_results?: ReturnType<typeof TransactionResultResponse.prototype.toObject>[];
        }) {
            const message = new TransactionResultsResponse({});
            if (data.transaction_results != null) {
                message.transaction_results = data.transaction_results.map(item => TransactionResultResponse.fromObject(item));
            }
            return message;
        }
        toObject() {
            const data: {
                transaction_results?: ReturnType<typeof TransactionResultResponse.prototype.toObject>[];
            } = {};
            if (this.transaction_results != null) {
                data.transaction_results = this.transaction_results.map((item: TransactionResultResponse) => item.toObject());
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.transaction_results !== undefined)
                writer.writeRepeatedMessage(1, this.transaction_results, (item: TransactionResultResponse) => item.serialize(writer));
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): TransactionResultsResponse {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new TransactionResultsResponse();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        reader.readMessage(message.transaction_results, () => pb_1.Message.addToRepeatedWrapperField(message, 1, TransactionResultResponse.deserialize(reader), TransactionResultResponse));
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): TransactionResultsResponse {
            return TransactionResultsResponse.deserialize(bytes);
        }
    }
    export class TransactionsResponse extends pb_1.Message {
        constructor(data?: any[] | {
            transactions?: dependency_7.flow.entities.Transaction[];
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [1], []);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("transactions" in data && data.transactions != undefined) {
                    this.transactions = data.transactions;
                }
            }
        }
        get transactions() {
            return pb_1.Message.getRepeatedWrapperField(this, dependency_7.flow.entities.Transaction, 1) as dependency_7.flow.entities.Transaction[];
        }
        set transactions(value: dependency_7.flow.entities.Transaction[]) {
            pb_1.Message.setRepeatedWrapperField(this, 1, value);
        }
        static fromObject(data: {
            transactions?: ReturnType<typeof dependency_7.flow.entities.Transaction.prototype.toObject>[];
        }) {
            const message = new TransactionsResponse({});
            if (data.transactions != null) {
                message.transactions = data.transactions.map(item => dependency_7.flow.entities.Transaction.fromObject(item));
            }
            return message;
        }
        toObject() {
            const data: {
                transactions?: ReturnType<typeof dependency_7.flow.entities.Transaction.prototype.toObject>[];
            } = {};
            if (this.transactions != null) {
                data.transactions = this.transactions.map((item: dependency_7.flow.entities.Transaction) => item.toObject());
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.transactions !== undefined)
                writer.writeRepeatedMessage(1, this.transactions, (item: dependency_7.flow.entities.Transaction) => item.serialize(writer));
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): TransactionsResponse {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new TransactionsResponse();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        reader.readMessage(message.transactions, () => pb_1.Message.addToRepeatedWrapperField(message, 1, dependency_7.flow.entities.Transaction.deserialize(reader), dependency_7.flow.entities.Transaction));
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): TransactionsResponse {
            return TransactionsResponse.deserialize(bytes);
        }
    }
    export class TransactionResponse extends pb_1.Message {
        constructor(data?: any[] | {
            transaction?: dependency_7.flow.entities.Transaction;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], []);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("transaction" in data && data.transaction != undefined) {
                    this.transaction = data.transaction;
                }
            }
        }
        get transaction() {
            return pb_1.Message.getWrapperField(this, dependency_7.flow.entities.Transaction, 1) as dependency_7.flow.entities.Transaction;
        }
        set transaction(value: dependency_7.flow.entities.Transaction) {
            pb_1.Message.setWrapperField(this, 1, value);
        }
        static fromObject(data: {
            transaction?: ReturnType<typeof dependency_7.flow.entities.Transaction.prototype.toObject>;
        }) {
            const message = new TransactionResponse({});
            if (data.transaction != null) {
                message.transaction = dependency_7.flow.entities.Transaction.fromObject(data.transaction);
            }
            return message;
        }
        toObject() {
            const data: {
                transaction?: ReturnType<typeof dependency_7.flow.entities.Transaction.prototype.toObject>;
            } = {};
            if (this.transaction != null) {
                data.transaction = this.transaction.toObject();
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.transaction !== undefined)
                writer.writeMessage(1, this.transaction, () => this.transaction.serialize(writer));
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): TransactionResponse {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new TransactionResponse();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        reader.readMessage(message.transaction, () => message.transaction = dependency_7.flow.entities.Transaction.deserialize(reader));
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): TransactionResponse {
            return TransactionResponse.deserialize(bytes);
        }
    }
    export class TransactionResultResponse extends pb_1.Message {
        constructor(data?: any[] | {
            status?: dependency_7.flow.entities.TransactionStatus;
            status_code?: number;
            error_message?: string;
            events?: dependency_5.flow.entities.Event[];
            block_id?: Uint8Array;
            transaction_id?: Uint8Array;
            collection_id?: Uint8Array;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [4], []);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("status" in data && data.status != undefined) {
                    this.status = data.status;
                }
                if ("status_code" in data && data.status_code != undefined) {
                    this.status_code = data.status_code;
                }
                if ("error_message" in data && data.error_message != undefined) {
                    this.error_message = data.error_message;
                }
                if ("events" in data && data.events != undefined) {
                    this.events = data.events;
                }
                if ("block_id" in data && data.block_id != undefined) {
                    this.block_id = data.block_id;
                }
                if ("transaction_id" in data && data.transaction_id != undefined) {
                    this.transaction_id = data.transaction_id;
                }
                if ("collection_id" in data && data.collection_id != undefined) {
                    this.collection_id = data.collection_id;
                }
            }
        }
        get status() {
            return pb_1.Message.getField(this, 1) as dependency_7.flow.entities.TransactionStatus;
        }
        set status(value: dependency_7.flow.entities.TransactionStatus) {
            pb_1.Message.setField(this, 1, value);
        }
        get status_code() {
            return pb_1.Message.getField(this, 2) as number;
        }
        set status_code(value: number) {
            pb_1.Message.setField(this, 2, value);
        }
        get error_message() {
            return pb_1.Message.getField(this, 3) as string;
        }
        set error_message(value: string) {
            pb_1.Message.setField(this, 3, value);
        }
        get events() {
            return pb_1.Message.getRepeatedWrapperField(this, dependency_5.flow.entities.Event, 4) as dependency_5.flow.entities.Event[];
        }
        set events(value: dependency_5.flow.entities.Event[]) {
            pb_1.Message.setRepeatedWrapperField(this, 4, value);
        }
        get block_id() {
            return pb_1.Message.getField(this, 5) as Uint8Array;
        }
        set block_id(value: Uint8Array) {
            pb_1.Message.setField(this, 5, value);
        }
        get transaction_id() {
            return pb_1.Message.getField(this, 6) as Uint8Array;
        }
        set transaction_id(value: Uint8Array) {
            pb_1.Message.setField(this, 6, value);
        }
        get collection_id() {
            return pb_1.Message.getField(this, 7) as Uint8Array;
        }
        set collection_id(value: Uint8Array) {
            pb_1.Message.setField(this, 7, value);
        }
        static fromObject(data: {
            status?: dependency_7.flow.entities.TransactionStatus;
            status_code?: number;
            error_message?: string;
            events?: ReturnType<typeof dependency_5.flow.entities.Event.prototype.toObject>[];
            block_id?: Uint8Array;
            transaction_id?: Uint8Array;
            collection_id?: Uint8Array;
        }) {
            const message = new TransactionResultResponse({});
            if (data.status != null) {
                message.status = data.status;
            }
            if (data.status_code != null) {
                message.status_code = data.status_code;
            }
            if (data.error_message != null) {
                message.error_message = data.error_message;
            }
            if (data.events != null) {
                message.events = data.events.map(item => dependency_5.flow.entities.Event.fromObject(item));
            }
            if (data.block_id != null) {
                message.block_id = data.block_id;
            }
            if (data.transaction_id != null) {
                message.transaction_id = data.transaction_id;
            }
            if (data.collection_id != null) {
                message.collection_id = data.collection_id;
            }
            return message;
        }
        toObject() {
            const data: {
                status?: dependency_7.flow.entities.TransactionStatus;
                status_code?: number;
                error_message?: string;
                events?: ReturnType<typeof dependency_5.flow.entities.Event.prototype.toObject>[];
                block_id?: Uint8Array;
                transaction_id?: Uint8Array;
                collection_id?: Uint8Array;
            } = {};
            if (this.status != null) {
                data.status = this.status;
            }
            if (this.status_code != null) {
                data.status_code = this.status_code;
            }
            if (this.error_message != null) {
                data.error_message = this.error_message;
            }
            if (this.events != null) {
                data.events = this.events.map((item: dependency_5.flow.entities.Event) => item.toObject());
            }
            if (this.block_id != null) {
                data.block_id = this.block_id;
            }
            if (this.transaction_id != null) {
                data.transaction_id = this.transaction_id;
            }
            if (this.collection_id != null) {
                data.collection_id = this.collection_id;
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.status !== undefined)
                writer.writeEnum(1, this.status);
            if (this.status_code !== undefined)
                writer.writeUint32(2, this.status_code);
            if (typeof this.error_message === "string" && this.error_message.length)
                writer.writeString(3, this.error_message);
            if (this.events !== undefined)
                writer.writeRepeatedMessage(4, this.events, (item: dependency_5.flow.entities.Event) => item.serialize(writer));
            if (this.block_id !== undefined)
                writer.writeBytes(5, this.block_id);
            if (this.transaction_id !== undefined)
                writer.writeBytes(6, this.transaction_id);
            if (this.collection_id !== undefined)
                writer.writeBytes(7, this.collection_id);
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): TransactionResultResponse {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new TransactionResultResponse();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.status = reader.readEnum();
                        break;
                    case 2:
                        message.status_code = reader.readUint32();
                        break;
                    case 3:
                        message.error_message = reader.readString();
                        break;
                    case 4:
                        reader.readMessage(message.events, () => pb_1.Message.addToRepeatedWrapperField(message, 4, dependency_5.flow.entities.Event.deserialize(reader), dependency_5.flow.entities.Event));
                        break;
                    case 5:
                        message.block_id = reader.readBytes();
                        break;
                    case 6:
                        message.transaction_id = reader.readBytes();
                        break;
                    case 7:
                        message.collection_id = reader.readBytes();
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): TransactionResultResponse {
            return TransactionResultResponse.deserialize(bytes);
        }
    }
    export class GetAccountRequest extends pb_1.Message {
        constructor(data?: any[] | {
            address?: Uint8Array;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], []);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("address" in data && data.address != undefined) {
                    this.address = data.address;
                }
            }
        }
        get address() {
            return pb_1.Message.getField(this, 1) as Uint8Array;
        }
        set address(value: Uint8Array) {
            pb_1.Message.setField(this, 1, value);
        }
        static fromObject(data: {
            address?: Uint8Array;
        }) {
            const message = new GetAccountRequest({});
            if (data.address != null) {
                message.address = data.address;
            }
            return message;
        }
        toObject() {
            const data: {
                address?: Uint8Array;
            } = {};
            if (this.address != null) {
                data.address = this.address;
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.address !== undefined)
                writer.writeBytes(1, this.address);
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): GetAccountRequest {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new GetAccountRequest();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.address = reader.readBytes();
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): GetAccountRequest {
            return GetAccountRequest.deserialize(bytes);
        }
    }
    export class GetAccountResponse extends pb_1.Message {
        constructor(data?: any[] | {
            account?: dependency_1.flow.entities.Account;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], []);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("account" in data && data.account != undefined) {
                    this.account = data.account;
                }
            }
        }
        get account() {
            return pb_1.Message.getWrapperField(this, dependency_1.flow.entities.Account, 1) as dependency_1.flow.entities.Account;
        }
        set account(value: dependency_1.flow.entities.Account) {
            pb_1.Message.setWrapperField(this, 1, value);
        }
        static fromObject(data: {
            account?: ReturnType<typeof dependency_1.flow.entities.Account.prototype.toObject>;
        }) {
            const message = new GetAccountResponse({});
            if (data.account != null) {
                message.account = dependency_1.flow.entities.Account.fromObject(data.account);
            }
            return message;
        }
        toObject() {
            const data: {
                account?: ReturnType<typeof dependency_1.flow.entities.Account.prototype.toObject>;
            } = {};
            if (this.account != null) {
                data.account = this.account.toObject();
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.account !== undefined)
                writer.writeMessage(1, this.account, () => this.account.serialize(writer));
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): GetAccountResponse {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new GetAccountResponse();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        reader.readMessage(message.account, () => message.account = dependency_1.flow.entities.Account.deserialize(reader));
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): GetAccountResponse {
            return GetAccountResponse.deserialize(bytes);
        }
    }
    export class GetAccountAtLatestBlockRequest extends pb_1.Message {
        constructor(data?: any[] | {
            address?: Uint8Array;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], []);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("address" in data && data.address != undefined) {
                    this.address = data.address;
                }
            }
        }
        get address() {
            return pb_1.Message.getField(this, 1) as Uint8Array;
        }
        set address(value: Uint8Array) {
            pb_1.Message.setField(this, 1, value);
        }
        static fromObject(data: {
            address?: Uint8Array;
        }) {
            const message = new GetAccountAtLatestBlockRequest({});
            if (data.address != null) {
                message.address = data.address;
            }
            return message;
        }
        toObject() {
            const data: {
                address?: Uint8Array;
            } = {};
            if (this.address != null) {
                data.address = this.address;
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.address !== undefined)
                writer.writeBytes(1, this.address);
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): GetAccountAtLatestBlockRequest {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new GetAccountAtLatestBlockRequest();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.address = reader.readBytes();
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): GetAccountAtLatestBlockRequest {
            return GetAccountAtLatestBlockRequest.deserialize(bytes);
        }
    }
    export class AccountResponse extends pb_1.Message {
        constructor(data?: any[] | {
            account?: dependency_1.flow.entities.Account;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], []);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("account" in data && data.account != undefined) {
                    this.account = data.account;
                }
            }
        }
        get account() {
            return pb_1.Message.getWrapperField(this, dependency_1.flow.entities.Account, 1) as dependency_1.flow.entities.Account;
        }
        set account(value: dependency_1.flow.entities.Account) {
            pb_1.Message.setWrapperField(this, 1, value);
        }
        static fromObject(data: {
            account?: ReturnType<typeof dependency_1.flow.entities.Account.prototype.toObject>;
        }) {
            const message = new AccountResponse({});
            if (data.account != null) {
                message.account = dependency_1.flow.entities.Account.fromObject(data.account);
            }
            return message;
        }
        toObject() {
            const data: {
                account?: ReturnType<typeof dependency_1.flow.entities.Account.prototype.toObject>;
            } = {};
            if (this.account != null) {
                data.account = this.account.toObject();
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.account !== undefined)
                writer.writeMessage(1, this.account, () => this.account.serialize(writer));
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): AccountResponse {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new AccountResponse();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        reader.readMessage(message.account, () => message.account = dependency_1.flow.entities.Account.deserialize(reader));
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): AccountResponse {
            return AccountResponse.deserialize(bytes);
        }
    }
    export class GetAccountAtBlockHeightRequest extends pb_1.Message {
        constructor(data?: any[] | {
            address?: Uint8Array;
            block_height?: number;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], []);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("address" in data && data.address != undefined) {
                    this.address = data.address;
                }
                if ("block_height" in data && data.block_height != undefined) {
                    this.block_height = data.block_height;
                }
            }
        }
        get address() {
            return pb_1.Message.getField(this, 1) as Uint8Array;
        }
        set address(value: Uint8Array) {
            pb_1.Message.setField(this, 1, value);
        }
        get block_height() {
            return pb_1.Message.getField(this, 2) as number;
        }
        set block_height(value: number) {
            pb_1.Message.setField(this, 2, value);
        }
        static fromObject(data: {
            address?: Uint8Array;
            block_height?: number;
        }) {
            const message = new GetAccountAtBlockHeightRequest({});
            if (data.address != null) {
                message.address = data.address;
            }
            if (data.block_height != null) {
                message.block_height = data.block_height;
            }
            return message;
        }
        toObject() {
            const data: {
                address?: Uint8Array;
                block_height?: number;
            } = {};
            if (this.address != null) {
                data.address = this.address;
            }
            if (this.block_height != null) {
                data.block_height = this.block_height;
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.address !== undefined)
                writer.writeBytes(1, this.address);
            if (this.block_height !== undefined)
                writer.writeUint64(2, this.block_height);
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): GetAccountAtBlockHeightRequest {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new GetAccountAtBlockHeightRequest();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.address = reader.readBytes();
                        break;
                    case 2:
                        message.block_height = reader.readUint64();
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): GetAccountAtBlockHeightRequest {
            return GetAccountAtBlockHeightRequest.deserialize(bytes);
        }
    }
    export class ExecuteScriptAtLatestBlockRequest extends pb_1.Message {
        constructor(data?: any[] | {
            script?: Uint8Array;
            arguments?: Uint8Array[];
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [2], []);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("script" in data && data.script != undefined) {
                    this.script = data.script;
                }
                if ("arguments" in data && data.arguments != undefined) {
                    this.arguments = data.arguments;
                }
            }
        }
        get script() {
            return pb_1.Message.getField(this, 1) as Uint8Array;
        }
        set script(value: Uint8Array) {
            pb_1.Message.setField(this, 1, value);
        }
        get arguments() {
            return pb_1.Message.getField(this, 2) as Uint8Array[];
        }
        set arguments(value: Uint8Array[]) {
            pb_1.Message.setField(this, 2, value);
        }
        static fromObject(data: {
            script?: Uint8Array;
            arguments?: Uint8Array[];
        }) {
            const message = new ExecuteScriptAtLatestBlockRequest({});
            if (data.script != null) {
                message.script = data.script;
            }
            if (data.arguments != null) {
                message.arguments = data.arguments;
            }
            return message;
        }
        toObject() {
            const data: {
                script?: Uint8Array;
                arguments?: Uint8Array[];
            } = {};
            if (this.script != null) {
                data.script = this.script;
            }
            if (this.arguments != null) {
                data.arguments = this.arguments;
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.script !== undefined)
                writer.writeBytes(1, this.script);
            if (this.arguments !== undefined)
                writer.writeRepeatedBytes(2, this.arguments);
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): ExecuteScriptAtLatestBlockRequest {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new ExecuteScriptAtLatestBlockRequest();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.script = reader.readBytes();
                        break;
                    case 2:
                        pb_1.Message.addToRepeatedField(message, 2, reader.readBytes());
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): ExecuteScriptAtLatestBlockRequest {
            return ExecuteScriptAtLatestBlockRequest.deserialize(bytes);
        }
    }
    export class ExecuteScriptAtBlockIDRequest extends pb_1.Message {
        constructor(data?: any[] | {
            block_id?: Uint8Array;
            script?: Uint8Array;
            arguments?: Uint8Array[];
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [3], []);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("block_id" in data && data.block_id != undefined) {
                    this.block_id = data.block_id;
                }
                if ("script" in data && data.script != undefined) {
                    this.script = data.script;
                }
                if ("arguments" in data && data.arguments != undefined) {
                    this.arguments = data.arguments;
                }
            }
        }
        get block_id() {
            return pb_1.Message.getField(this, 1) as Uint8Array;
        }
        set block_id(value: Uint8Array) {
            pb_1.Message.setField(this, 1, value);
        }
        get script() {
            return pb_1.Message.getField(this, 2) as Uint8Array;
        }
        set script(value: Uint8Array) {
            pb_1.Message.setField(this, 2, value);
        }
        get arguments() {
            return pb_1.Message.getField(this, 3) as Uint8Array[];
        }
        set arguments(value: Uint8Array[]) {
            pb_1.Message.setField(this, 3, value);
        }
        static fromObject(data: {
            block_id?: Uint8Array;
            script?: Uint8Array;
            arguments?: Uint8Array[];
        }) {
            const message = new ExecuteScriptAtBlockIDRequest({});
            if (data.block_id != null) {
                message.block_id = data.block_id;
            }
            if (data.script != null) {
                message.script = data.script;
            }
            if (data.arguments != null) {
                message.arguments = data.arguments;
            }
            return message;
        }
        toObject() {
            const data: {
                block_id?: Uint8Array;
                script?: Uint8Array;
                arguments?: Uint8Array[];
            } = {};
            if (this.block_id != null) {
                data.block_id = this.block_id;
            }
            if (this.script != null) {
                data.script = this.script;
            }
            if (this.arguments != null) {
                data.arguments = this.arguments;
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.block_id !== undefined)
                writer.writeBytes(1, this.block_id);
            if (this.script !== undefined)
                writer.writeBytes(2, this.script);
            if (this.arguments !== undefined)
                writer.writeRepeatedBytes(3, this.arguments);
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): ExecuteScriptAtBlockIDRequest {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new ExecuteScriptAtBlockIDRequest();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.block_id = reader.readBytes();
                        break;
                    case 2:
                        message.script = reader.readBytes();
                        break;
                    case 3:
                        pb_1.Message.addToRepeatedField(message, 3, reader.readBytes());
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): ExecuteScriptAtBlockIDRequest {
            return ExecuteScriptAtBlockIDRequest.deserialize(bytes);
        }
    }
    export class ExecuteScriptAtBlockHeightRequest extends pb_1.Message {
        constructor(data?: any[] | {
            block_height?: number;
            script?: Uint8Array;
            arguments?: Uint8Array[];
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [3], []);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("block_height" in data && data.block_height != undefined) {
                    this.block_height = data.block_height;
                }
                if ("script" in data && data.script != undefined) {
                    this.script = data.script;
                }
                if ("arguments" in data && data.arguments != undefined) {
                    this.arguments = data.arguments;
                }
            }
        }
        get block_height() {
            return pb_1.Message.getField(this, 1) as number;
        }
        set block_height(value: number) {
            pb_1.Message.setField(this, 1, value);
        }
        get script() {
            return pb_1.Message.getField(this, 2) as Uint8Array;
        }
        set script(value: Uint8Array) {
            pb_1.Message.setField(this, 2, value);
        }
        get arguments() {
            return pb_1.Message.getField(this, 3) as Uint8Array[];
        }
        set arguments(value: Uint8Array[]) {
            pb_1.Message.setField(this, 3, value);
        }
        static fromObject(data: {
            block_height?: number;
            script?: Uint8Array;
            arguments?: Uint8Array[];
        }) {
            const message = new ExecuteScriptAtBlockHeightRequest({});
            if (data.block_height != null) {
                message.block_height = data.block_height;
            }
            if (data.script != null) {
                message.script = data.script;
            }
            if (data.arguments != null) {
                message.arguments = data.arguments;
            }
            return message;
        }
        toObject() {
            const data: {
                block_height?: number;
                script?: Uint8Array;
                arguments?: Uint8Array[];
            } = {};
            if (this.block_height != null) {
                data.block_height = this.block_height;
            }
            if (this.script != null) {
                data.script = this.script;
            }
            if (this.arguments != null) {
                data.arguments = this.arguments;
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.block_height !== undefined)
                writer.writeUint64(1, this.block_height);
            if (this.script !== undefined)
                writer.writeBytes(2, this.script);
            if (this.arguments !== undefined)
                writer.writeRepeatedBytes(3, this.arguments);
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): ExecuteScriptAtBlockHeightRequest {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new ExecuteScriptAtBlockHeightRequest();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.block_height = reader.readUint64();
                        break;
                    case 2:
                        message.script = reader.readBytes();
                        break;
                    case 3:
                        pb_1.Message.addToRepeatedField(message, 3, reader.readBytes());
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): ExecuteScriptAtBlockHeightRequest {
            return ExecuteScriptAtBlockHeightRequest.deserialize(bytes);
        }
    }
    export class ExecuteScriptResponse extends pb_1.Message {
        constructor(data?: any[] | {
            value?: Uint8Array;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], []);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("value" in data && data.value != undefined) {
                    this.value = data.value;
                }
            }
        }
        get value() {
            return pb_1.Message.getField(this, 1) as Uint8Array;
        }
        set value(value: Uint8Array) {
            pb_1.Message.setField(this, 1, value);
        }
        static fromObject(data: {
            value?: Uint8Array;
        }) {
            const message = new ExecuteScriptResponse({});
            if (data.value != null) {
                message.value = data.value;
            }
            return message;
        }
        toObject() {
            const data: {
                value?: Uint8Array;
            } = {};
            if (this.value != null) {
                data.value = this.value;
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.value !== undefined)
                writer.writeBytes(1, this.value);
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): ExecuteScriptResponse {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new ExecuteScriptResponse();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.value = reader.readBytes();
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): ExecuteScriptResponse {
            return ExecuteScriptResponse.deserialize(bytes);
        }
    }
    export class GetEventsForHeightRangeRequest extends pb_1.Message {
        constructor(data?: any[] | {
            type?: string;
            start_height?: number;
            end_height?: number;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], []);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("type" in data && data.type != undefined) {
                    this.type = data.type;
                }
                if ("start_height" in data && data.start_height != undefined) {
                    this.start_height = data.start_height;
                }
                if ("end_height" in data && data.end_height != undefined) {
                    this.end_height = data.end_height;
                }
            }
        }
        get type() {
            return pb_1.Message.getField(this, 1) as string;
        }
        set type(value: string) {
            pb_1.Message.setField(this, 1, value);
        }
        get start_height() {
            return pb_1.Message.getField(this, 2) as number;
        }
        set start_height(value: number) {
            pb_1.Message.setField(this, 2, value);
        }
        get end_height() {
            return pb_1.Message.getField(this, 3) as number;
        }
        set end_height(value: number) {
            pb_1.Message.setField(this, 3, value);
        }
        static fromObject(data: {
            type?: string;
            start_height?: number;
            end_height?: number;
        }) {
            const message = new GetEventsForHeightRangeRequest({});
            if (data.type != null) {
                message.type = data.type;
            }
            if (data.start_height != null) {
                message.start_height = data.start_height;
            }
            if (data.end_height != null) {
                message.end_height = data.end_height;
            }
            return message;
        }
        toObject() {
            const data: {
                type?: string;
                start_height?: number;
                end_height?: number;
            } = {};
            if (this.type != null) {
                data.type = this.type;
            }
            if (this.start_height != null) {
                data.start_height = this.start_height;
            }
            if (this.end_height != null) {
                data.end_height = this.end_height;
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (typeof this.type === "string" && this.type.length)
                writer.writeString(1, this.type);
            if (this.start_height !== undefined)
                writer.writeUint64(2, this.start_height);
            if (this.end_height !== undefined)
                writer.writeUint64(3, this.end_height);
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): GetEventsForHeightRangeRequest {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new GetEventsForHeightRangeRequest();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.type = reader.readString();
                        break;
                    case 2:
                        message.start_height = reader.readUint64();
                        break;
                    case 3:
                        message.end_height = reader.readUint64();
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): GetEventsForHeightRangeRequest {
            return GetEventsForHeightRangeRequest.deserialize(bytes);
        }
    }
    export class GetEventsForBlockIDsRequest extends pb_1.Message {
        constructor(data?: any[] | {
            type?: string;
            block_ids?: Uint8Array[];
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [2], []);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("type" in data && data.type != undefined) {
                    this.type = data.type;
                }
                if ("block_ids" in data && data.block_ids != undefined) {
                    this.block_ids = data.block_ids;
                }
            }
        }
        get type() {
            return pb_1.Message.getField(this, 1) as string;
        }
        set type(value: string) {
            pb_1.Message.setField(this, 1, value);
        }
        get block_ids() {
            return pb_1.Message.getField(this, 2) as Uint8Array[];
        }
        set block_ids(value: Uint8Array[]) {
            pb_1.Message.setField(this, 2, value);
        }
        static fromObject(data: {
            type?: string;
            block_ids?: Uint8Array[];
        }) {
            const message = new GetEventsForBlockIDsRequest({});
            if (data.type != null) {
                message.type = data.type;
            }
            if (data.block_ids != null) {
                message.block_ids = data.block_ids;
            }
            return message;
        }
        toObject() {
            const data: {
                type?: string;
                block_ids?: Uint8Array[];
            } = {};
            if (this.type != null) {
                data.type = this.type;
            }
            if (this.block_ids != null) {
                data.block_ids = this.block_ids;
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (typeof this.type === "string" && this.type.length)
                writer.writeString(1, this.type);
            if (this.block_ids !== undefined)
                writer.writeRepeatedBytes(2, this.block_ids);
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): GetEventsForBlockIDsRequest {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new GetEventsForBlockIDsRequest();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.type = reader.readString();
                        break;
                    case 2:
                        pb_1.Message.addToRepeatedField(message, 2, reader.readBytes());
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): GetEventsForBlockIDsRequest {
            return GetEventsForBlockIDsRequest.deserialize(bytes);
        }
    }
    export class EventsResponse extends pb_1.Message {
        constructor(data?: any[] | {
            results?: EventsResponse.Result[];
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [1], []);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("results" in data && data.results != undefined) {
                    this.results = data.results;
                }
            }
        }
        get results() {
            return pb_1.Message.getRepeatedWrapperField(this, EventsResponse.Result, 1) as EventsResponse.Result[];
        }
        set results(value: EventsResponse.Result[]) {
            pb_1.Message.setRepeatedWrapperField(this, 1, value);
        }
        static fromObject(data: {
            results?: ReturnType<typeof EventsResponse.Result.prototype.toObject>[];
        }) {
            const message = new EventsResponse({});
            if (data.results != null) {
                message.results = data.results.map(item => EventsResponse.Result.fromObject(item));
            }
            return message;
        }
        toObject() {
            const data: {
                results?: ReturnType<typeof EventsResponse.Result.prototype.toObject>[];
            } = {};
            if (this.results != null) {
                data.results = this.results.map((item: EventsResponse.Result) => item.toObject());
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.results !== undefined)
                writer.writeRepeatedMessage(1, this.results, (item: EventsResponse.Result) => item.serialize(writer));
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): EventsResponse {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new EventsResponse();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        reader.readMessage(message.results, () => pb_1.Message.addToRepeatedWrapperField(message, 1, EventsResponse.Result.deserialize(reader), EventsResponse.Result));
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): EventsResponse {
            return EventsResponse.deserialize(bytes);
        }
    }
    export namespace EventsResponse {
        export class Result extends pb_1.Message {
            constructor(data?: any[] | {
                block_id?: Uint8Array;
                block_height?: number;
                events?: dependency_5.flow.entities.Event[];
                block_timestamp?: dependency_8.google.protobuf.Timestamp;
            }) {
                super();
                pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [3], []);
                if (!Array.isArray(data) && typeof data == "object") {
                    if ("block_id" in data && data.block_id != undefined) {
                        this.block_id = data.block_id;
                    }
                    if ("block_height" in data && data.block_height != undefined) {
                        this.block_height = data.block_height;
                    }
                    if ("events" in data && data.events != undefined) {
                        this.events = data.events;
                    }
                    if ("block_timestamp" in data && data.block_timestamp != undefined) {
                        this.block_timestamp = data.block_timestamp;
                    }
                }
            }
            get block_id() {
                return pb_1.Message.getField(this, 1) as Uint8Array;
            }
            set block_id(value: Uint8Array) {
                pb_1.Message.setField(this, 1, value);
            }
            get block_height() {
                return pb_1.Message.getField(this, 2) as number;
            }
            set block_height(value: number) {
                pb_1.Message.setField(this, 2, value);
            }
            get events() {
                return pb_1.Message.getRepeatedWrapperField(this, dependency_5.flow.entities.Event, 3) as dependency_5.flow.entities.Event[];
            }
            set events(value: dependency_5.flow.entities.Event[]) {
                pb_1.Message.setRepeatedWrapperField(this, 3, value);
            }
            get block_timestamp() {
                return pb_1.Message.getWrapperField(this, dependency_8.google.protobuf.Timestamp, 4) as dependency_8.google.protobuf.Timestamp;
            }
            set block_timestamp(value: dependency_8.google.protobuf.Timestamp) {
                pb_1.Message.setWrapperField(this, 4, value);
            }
            static fromObject(data: {
                block_id?: Uint8Array;
                block_height?: number;
                events?: ReturnType<typeof dependency_5.flow.entities.Event.prototype.toObject>[];
                block_timestamp?: ReturnType<typeof dependency_8.google.protobuf.Timestamp.prototype.toObject>;
            }) {
                const message = new Result({});
                if (data.block_id != null) {
                    message.block_id = data.block_id;
                }
                if (data.block_height != null) {
                    message.block_height = data.block_height;
                }
                if (data.events != null) {
                    message.events = data.events.map(item => dependency_5.flow.entities.Event.fromObject(item));
                }
                if (data.block_timestamp != null) {
                    message.block_timestamp = dependency_8.google.protobuf.Timestamp.fromObject(data.block_timestamp);
                }
                return message;
            }
            toObject() {
                const data: {
                    block_id?: Uint8Array;
                    block_height?: number;
                    events?: ReturnType<typeof dependency_5.flow.entities.Event.prototype.toObject>[];
                    block_timestamp?: ReturnType<typeof dependency_8.google.protobuf.Timestamp.prototype.toObject>;
                } = {};
                if (this.block_id != null) {
                    data.block_id = this.block_id;
                }
                if (this.block_height != null) {
                    data.block_height = this.block_height;
                }
                if (this.events != null) {
                    data.events = this.events.map((item: dependency_5.flow.entities.Event) => item.toObject());
                }
                if (this.block_timestamp != null) {
                    data.block_timestamp = this.block_timestamp.toObject();
                }
                return data;
            }
            serialize(): Uint8Array;
            serialize(w: pb_1.BinaryWriter): void;
            serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
                const writer = w || new pb_1.BinaryWriter();
                if (this.block_id !== undefined)
                    writer.writeBytes(1, this.block_id);
                if (this.block_height !== undefined)
                    writer.writeUint64(2, this.block_height);
                if (this.events !== undefined)
                    writer.writeRepeatedMessage(3, this.events, (item: dependency_5.flow.entities.Event) => item.serialize(writer));
                if (this.block_timestamp !== undefined)
                    writer.writeMessage(4, this.block_timestamp, () => this.block_timestamp.serialize(writer));
                if (!w)
                    return writer.getResultBuffer();
            }
            static deserialize(bytes: Uint8Array | pb_1.BinaryReader): Result {
                const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new Result();
                while (reader.nextField()) {
                    if (reader.isEndGroup())
                        break;
                    switch (reader.getFieldNumber()) {
                        case 1:
                            message.block_id = reader.readBytes();
                            break;
                        case 2:
                            message.block_height = reader.readUint64();
                            break;
                        case 3:
                            reader.readMessage(message.events, () => pb_1.Message.addToRepeatedWrapperField(message, 3, dependency_5.flow.entities.Event.deserialize(reader), dependency_5.flow.entities.Event));
                            break;
                        case 4:
                            reader.readMessage(message.block_timestamp, () => message.block_timestamp = dependency_8.google.protobuf.Timestamp.deserialize(reader));
                            break;
                        default: reader.skipField();
                    }
                }
                return message;
            }
            serializeBinary(): Uint8Array {
                return this.serialize();
            }
            static deserializeBinary(bytes: Uint8Array): Result {
                return Result.deserialize(bytes);
            }
        }
    }
    export class GetNetworkParametersRequest extends pb_1.Message {
        constructor(data?: any[] | {}) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], []);
            if (!Array.isArray(data) && typeof data == "object") { }
        }
        static fromObject(data: {}) {
            const message = new GetNetworkParametersRequest({});
            return message;
        }
        toObject() {
            const data: {} = {};
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): GetNetworkParametersRequest {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new GetNetworkParametersRequest();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): GetNetworkParametersRequest {
            return GetNetworkParametersRequest.deserialize(bytes);
        }
    }
    export class GetNetworkParametersResponse extends pb_1.Message {
        constructor(data?: any[] | {
            chain_id?: string;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], []);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("chain_id" in data && data.chain_id != undefined) {
                    this.chain_id = data.chain_id;
                }
            }
        }
        get chain_id() {
            return pb_1.Message.getField(this, 1) as string;
        }
        set chain_id(value: string) {
            pb_1.Message.setField(this, 1, value);
        }
        static fromObject(data: {
            chain_id?: string;
        }) {
            const message = new GetNetworkParametersResponse({});
            if (data.chain_id != null) {
                message.chain_id = data.chain_id;
            }
            return message;
        }
        toObject() {
            const data: {
                chain_id?: string;
            } = {};
            if (this.chain_id != null) {
                data.chain_id = this.chain_id;
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (typeof this.chain_id === "string" && this.chain_id.length)
                writer.writeString(1, this.chain_id);
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): GetNetworkParametersResponse {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new GetNetworkParametersResponse();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.chain_id = reader.readString();
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): GetNetworkParametersResponse {
            return GetNetworkParametersResponse.deserialize(bytes);
        }
    }
    export class GetLatestProtocolStateSnapshotRequest extends pb_1.Message {
        constructor(data?: any[] | {}) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], []);
            if (!Array.isArray(data) && typeof data == "object") { }
        }
        static fromObject(data: {}) {
            const message = new GetLatestProtocolStateSnapshotRequest({});
            return message;
        }
        toObject() {
            const data: {} = {};
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): GetLatestProtocolStateSnapshotRequest {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new GetLatestProtocolStateSnapshotRequest();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): GetLatestProtocolStateSnapshotRequest {
            return GetLatestProtocolStateSnapshotRequest.deserialize(bytes);
        }
    }
    export class ProtocolStateSnapshotResponse extends pb_1.Message {
        constructor(data?: any[] | {
            serializedSnapshot?: Uint8Array;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], []);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("serializedSnapshot" in data && data.serializedSnapshot != undefined) {
                    this.serializedSnapshot = data.serializedSnapshot;
                }
            }
        }
        get serializedSnapshot() {
            return pb_1.Message.getField(this, 1) as Uint8Array;
        }
        set serializedSnapshot(value: Uint8Array) {
            pb_1.Message.setField(this, 1, value);
        }
        static fromObject(data: {
            serializedSnapshot?: Uint8Array;
        }) {
            const message = new ProtocolStateSnapshotResponse({});
            if (data.serializedSnapshot != null) {
                message.serializedSnapshot = data.serializedSnapshot;
            }
            return message;
        }
        toObject() {
            const data: {
                serializedSnapshot?: Uint8Array;
            } = {};
            if (this.serializedSnapshot != null) {
                data.serializedSnapshot = this.serializedSnapshot;
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.serializedSnapshot !== undefined)
                writer.writeBytes(1, this.serializedSnapshot);
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): ProtocolStateSnapshotResponse {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new ProtocolStateSnapshotResponse();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.serializedSnapshot = reader.readBytes();
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): ProtocolStateSnapshotResponse {
            return ProtocolStateSnapshotResponse.deserialize(bytes);
        }
    }
    export class GetExecutionResultForBlockIDRequest extends pb_1.Message {
        constructor(data?: any[] | {
            block_id?: Uint8Array;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], []);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("block_id" in data && data.block_id != undefined) {
                    this.block_id = data.block_id;
                }
            }
        }
        get block_id() {
            return pb_1.Message.getField(this, 1) as Uint8Array;
        }
        set block_id(value: Uint8Array) {
            pb_1.Message.setField(this, 1, value);
        }
        static fromObject(data: {
            block_id?: Uint8Array;
        }) {
            const message = new GetExecutionResultForBlockIDRequest({});
            if (data.block_id != null) {
                message.block_id = data.block_id;
            }
            return message;
        }
        toObject() {
            const data: {
                block_id?: Uint8Array;
            } = {};
            if (this.block_id != null) {
                data.block_id = this.block_id;
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.block_id !== undefined)
                writer.writeBytes(1, this.block_id);
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): GetExecutionResultForBlockIDRequest {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new GetExecutionResultForBlockIDRequest();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.block_id = reader.readBytes();
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): GetExecutionResultForBlockIDRequest {
            return GetExecutionResultForBlockIDRequest.deserialize(bytes);
        }
    }
    export class ExecutionResultForBlockIDResponse extends pb_1.Message {
        constructor(data?: any[] | {
            execution_result?: dependency_6.flow.entities.ExecutionResult;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], []);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("execution_result" in data && data.execution_result != undefined) {
                    this.execution_result = data.execution_result;
                }
            }
        }
        get execution_result() {
            return pb_1.Message.getWrapperField(this, dependency_6.flow.entities.ExecutionResult, 1) as dependency_6.flow.entities.ExecutionResult;
        }
        set execution_result(value: dependency_6.flow.entities.ExecutionResult) {
            pb_1.Message.setWrapperField(this, 1, value);
        }
        static fromObject(data: {
            execution_result?: ReturnType<typeof dependency_6.flow.entities.ExecutionResult.prototype.toObject>;
        }) {
            const message = new ExecutionResultForBlockIDResponse({});
            if (data.execution_result != null) {
                message.execution_result = dependency_6.flow.entities.ExecutionResult.fromObject(data.execution_result);
            }
            return message;
        }
        toObject() {
            const data: {
                execution_result?: ReturnType<typeof dependency_6.flow.entities.ExecutionResult.prototype.toObject>;
            } = {};
            if (this.execution_result != null) {
                data.execution_result = this.execution_result.toObject();
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.execution_result !== undefined)
                writer.writeMessage(1, this.execution_result, () => this.execution_result.serialize(writer));
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): ExecutionResultForBlockIDResponse {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new ExecutionResultForBlockIDResponse();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        reader.readMessage(message.execution_result, () => message.execution_result = dependency_6.flow.entities.ExecutionResult.deserialize(reader));
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): ExecutionResultForBlockIDResponse {
            return ExecutionResultForBlockIDResponse.deserialize(bytes);
        }
    }
    interface GrpcUnaryServiceInterface<P, R> {
        (message: P, metadata: grpc_1.Metadata, options: grpc_1.CallOptions, callback: grpc_1.requestCallback<R>): grpc_1.ClientUnaryCall;
        (message: P, metadata: grpc_1.Metadata, callback: grpc_1.requestCallback<R>): grpc_1.ClientUnaryCall;
        (message: P, options: grpc_1.CallOptions, callback: grpc_1.requestCallback<R>): grpc_1.ClientUnaryCall;
        (message: P, callback: grpc_1.requestCallback<R>): grpc_1.ClientUnaryCall;
    }
    interface GrpcStreamServiceInterface<P, R> {
        (message: P, metadata: grpc_1.Metadata, options?: grpc_1.CallOptions): grpc_1.ClientReadableStream<R>;
        (message: P, options?: grpc_1.CallOptions): grpc_1.ClientReadableStream<R>;
    }
    interface GrpWritableServiceInterface<P, R> {
        (metadata: grpc_1.Metadata, options: grpc_1.CallOptions, callback: grpc_1.requestCallback<R>): grpc_1.ClientWritableStream<P>;
        (metadata: grpc_1.Metadata, callback: grpc_1.requestCallback<R>): grpc_1.ClientWritableStream<P>;
        (options: grpc_1.CallOptions, callback: grpc_1.requestCallback<R>): grpc_1.ClientWritableStream<P>;
        (callback: grpc_1.requestCallback<R>): grpc_1.ClientWritableStream<P>;
    }
    interface GrpcChunkServiceInterface<P, R> {
        (metadata: grpc_1.Metadata, options?: grpc_1.CallOptions): grpc_1.ClientDuplexStream<P, R>;
        (options?: grpc_1.CallOptions): grpc_1.ClientDuplexStream<P, R>;
    }
    interface GrpcPromiseServiceInterface<P, R> {
        (message: P, metadata: grpc_1.Metadata, options?: grpc_1.CallOptions): Promise<R>;
        (message: P, options?: grpc_1.CallOptions): Promise<R>;
    }
    export abstract class UnimplementedAccessAPIService {
        static definition = {
            Ping: {
                path: "/flow.access.AccessAPI/Ping",
                requestStream: false,
                responseStream: false,
                requestSerialize: (message: PingRequest) => Buffer.from(message.serialize()),
                requestDeserialize: (bytes: Buffer) => PingRequest.deserialize(new Uint8Array(bytes)),
                responseSerialize: (message: PingResponse) => Buffer.from(message.serialize()),
                responseDeserialize: (bytes: Buffer) => PingResponse.deserialize(new Uint8Array(bytes))
            },
            GetLatestBlockHeader: {
                path: "/flow.access.AccessAPI/GetLatestBlockHeader",
                requestStream: false,
                responseStream: false,
                requestSerialize: (message: GetLatestBlockHeaderRequest) => Buffer.from(message.serialize()),
                requestDeserialize: (bytes: Buffer) => GetLatestBlockHeaderRequest.deserialize(new Uint8Array(bytes)),
                responseSerialize: (message: BlockHeaderResponse) => Buffer.from(message.serialize()),
                responseDeserialize: (bytes: Buffer) => BlockHeaderResponse.deserialize(new Uint8Array(bytes))
            },
            GetBlockHeaderByID: {
                path: "/flow.access.AccessAPI/GetBlockHeaderByID",
                requestStream: false,
                responseStream: false,
                requestSerialize: (message: GetBlockHeaderByIDRequest) => Buffer.from(message.serialize()),
                requestDeserialize: (bytes: Buffer) => GetBlockHeaderByIDRequest.deserialize(new Uint8Array(bytes)),
                responseSerialize: (message: BlockHeaderResponse) => Buffer.from(message.serialize()),
                responseDeserialize: (bytes: Buffer) => BlockHeaderResponse.deserialize(new Uint8Array(bytes))
            },
            GetBlockHeaderByHeight: {
                path: "/flow.access.AccessAPI/GetBlockHeaderByHeight",
                requestStream: false,
                responseStream: false,
                requestSerialize: (message: GetBlockHeaderByHeightRequest) => Buffer.from(message.serialize()),
                requestDeserialize: (bytes: Buffer) => GetBlockHeaderByHeightRequest.deserialize(new Uint8Array(bytes)),
                responseSerialize: (message: BlockHeaderResponse) => Buffer.from(message.serialize()),
                responseDeserialize: (bytes: Buffer) => BlockHeaderResponse.deserialize(new Uint8Array(bytes))
            },
            GetLatestBlock: {
                path: "/flow.access.AccessAPI/GetLatestBlock",
                requestStream: false,
                responseStream: false,
                requestSerialize: (message: GetLatestBlockRequest) => Buffer.from(message.serialize()),
                requestDeserialize: (bytes: Buffer) => GetLatestBlockRequest.deserialize(new Uint8Array(bytes)),
                responseSerialize: (message: BlockResponse) => Buffer.from(message.serialize()),
                responseDeserialize: (bytes: Buffer) => BlockResponse.deserialize(new Uint8Array(bytes))
            },
            GetBlockByID: {
                path: "/flow.access.AccessAPI/GetBlockByID",
                requestStream: false,
                responseStream: false,
                requestSerialize: (message: GetBlockByIDRequest) => Buffer.from(message.serialize()),
                requestDeserialize: (bytes: Buffer) => GetBlockByIDRequest.deserialize(new Uint8Array(bytes)),
                responseSerialize: (message: BlockResponse) => Buffer.from(message.serialize()),
                responseDeserialize: (bytes: Buffer) => BlockResponse.deserialize(new Uint8Array(bytes))
            },
            GetBlockByHeight: {
                path: "/flow.access.AccessAPI/GetBlockByHeight",
                requestStream: false,
                responseStream: false,
                requestSerialize: (message: GetBlockByHeightRequest) => Buffer.from(message.serialize()),
                requestDeserialize: (bytes: Buffer) => GetBlockByHeightRequest.deserialize(new Uint8Array(bytes)),
                responseSerialize: (message: BlockResponse) => Buffer.from(message.serialize()),
                responseDeserialize: (bytes: Buffer) => BlockResponse.deserialize(new Uint8Array(bytes))
            },
            GetCollectionByID: {
                path: "/flow.access.AccessAPI/GetCollectionByID",
                requestStream: false,
                responseStream: false,
                requestSerialize: (message: GetCollectionByIDRequest) => Buffer.from(message.serialize()),
                requestDeserialize: (bytes: Buffer) => GetCollectionByIDRequest.deserialize(new Uint8Array(bytes)),
                responseSerialize: (message: CollectionResponse) => Buffer.from(message.serialize()),
                responseDeserialize: (bytes: Buffer) => CollectionResponse.deserialize(new Uint8Array(bytes))
            },
            SendTransaction: {
                path: "/flow.access.AccessAPI/SendTransaction",
                requestStream: false,
                responseStream: false,
                requestSerialize: (message: SendTransactionRequest) => Buffer.from(message.serialize()),
                requestDeserialize: (bytes: Buffer) => SendTransactionRequest.deserialize(new Uint8Array(bytes)),
                responseSerialize: (message: SendTransactionResponse) => Buffer.from(message.serialize()),
                responseDeserialize: (bytes: Buffer) => SendTransactionResponse.deserialize(new Uint8Array(bytes))
            },
            GetTransaction: {
                path: "/flow.access.AccessAPI/GetTransaction",
                requestStream: false,
                responseStream: false,
                requestSerialize: (message: GetTransactionRequest) => Buffer.from(message.serialize()),
                requestDeserialize: (bytes: Buffer) => GetTransactionRequest.deserialize(new Uint8Array(bytes)),
                responseSerialize: (message: TransactionResponse) => Buffer.from(message.serialize()),
                responseDeserialize: (bytes: Buffer) => TransactionResponse.deserialize(new Uint8Array(bytes))
            },
            GetTransactionResult: {
                path: "/flow.access.AccessAPI/GetTransactionResult",
                requestStream: false,
                responseStream: false,
                requestSerialize: (message: GetTransactionRequest) => Buffer.from(message.serialize()),
                requestDeserialize: (bytes: Buffer) => GetTransactionRequest.deserialize(new Uint8Array(bytes)),
                responseSerialize: (message: TransactionResultResponse) => Buffer.from(message.serialize()),
                responseDeserialize: (bytes: Buffer) => TransactionResultResponse.deserialize(new Uint8Array(bytes))
            },
            GetTransactionResultByIndex: {
                path: "/flow.access.AccessAPI/GetTransactionResultByIndex",
                requestStream: false,
                responseStream: false,
                requestSerialize: (message: GetTransactionByIndexRequest) => Buffer.from(message.serialize()),
                requestDeserialize: (bytes: Buffer) => GetTransactionByIndexRequest.deserialize(new Uint8Array(bytes)),
                responseSerialize: (message: TransactionResultResponse) => Buffer.from(message.serialize()),
                responseDeserialize: (bytes: Buffer) => TransactionResultResponse.deserialize(new Uint8Array(bytes))
            },
            GetTransactionResultsByBlockID: {
                path: "/flow.access.AccessAPI/GetTransactionResultsByBlockID",
                requestStream: false,
                responseStream: false,
                requestSerialize: (message: GetTransactionsByBlockIDRequest) => Buffer.from(message.serialize()),
                requestDeserialize: (bytes: Buffer) => GetTransactionsByBlockIDRequest.deserialize(new Uint8Array(bytes)),
                responseSerialize: (message: TransactionResultsResponse) => Buffer.from(message.serialize()),
                responseDeserialize: (bytes: Buffer) => TransactionResultsResponse.deserialize(new Uint8Array(bytes))
            },
            GetTransactionsByBlockID: {
                path: "/flow.access.AccessAPI/GetTransactionsByBlockID",
                requestStream: false,
                responseStream: false,
                requestSerialize: (message: GetTransactionsByBlockIDRequest) => Buffer.from(message.serialize()),
                requestDeserialize: (bytes: Buffer) => GetTransactionsByBlockIDRequest.deserialize(new Uint8Array(bytes)),
                responseSerialize: (message: TransactionsResponse) => Buffer.from(message.serialize()),
                responseDeserialize: (bytes: Buffer) => TransactionsResponse.deserialize(new Uint8Array(bytes))
            },
            GetAccount: {
                path: "/flow.access.AccessAPI/GetAccount",
                requestStream: false,
                responseStream: false,
                requestSerialize: (message: GetAccountRequest) => Buffer.from(message.serialize()),
                requestDeserialize: (bytes: Buffer) => GetAccountRequest.deserialize(new Uint8Array(bytes)),
                responseSerialize: (message: GetAccountResponse) => Buffer.from(message.serialize()),
                responseDeserialize: (bytes: Buffer) => GetAccountResponse.deserialize(new Uint8Array(bytes))
            },
            GetAccountAtLatestBlock: {
                path: "/flow.access.AccessAPI/GetAccountAtLatestBlock",
                requestStream: false,
                responseStream: false,
                requestSerialize: (message: GetAccountAtLatestBlockRequest) => Buffer.from(message.serialize()),
                requestDeserialize: (bytes: Buffer) => GetAccountAtLatestBlockRequest.deserialize(new Uint8Array(bytes)),
                responseSerialize: (message: AccountResponse) => Buffer.from(message.serialize()),
                responseDeserialize: (bytes: Buffer) => AccountResponse.deserialize(new Uint8Array(bytes))
            },
            GetAccountAtBlockHeight: {
                path: "/flow.access.AccessAPI/GetAccountAtBlockHeight",
                requestStream: false,
                responseStream: false,
                requestSerialize: (message: GetAccountAtBlockHeightRequest) => Buffer.from(message.serialize()),
                requestDeserialize: (bytes: Buffer) => GetAccountAtBlockHeightRequest.deserialize(new Uint8Array(bytes)),
                responseSerialize: (message: AccountResponse) => Buffer.from(message.serialize()),
                responseDeserialize: (bytes: Buffer) => AccountResponse.deserialize(new Uint8Array(bytes))
            },
            ExecuteScriptAtLatestBlock: {
                path: "/flow.access.AccessAPI/ExecuteScriptAtLatestBlock",
                requestStream: false,
                responseStream: false,
                requestSerialize: (message: ExecuteScriptAtLatestBlockRequest) => Buffer.from(message.serialize()),
                requestDeserialize: (bytes: Buffer) => ExecuteScriptAtLatestBlockRequest.deserialize(new Uint8Array(bytes)),
                responseSerialize: (message: ExecuteScriptResponse) => Buffer.from(message.serialize()),
                responseDeserialize: (bytes: Buffer) => ExecuteScriptResponse.deserialize(new Uint8Array(bytes))
            },
            ExecuteScriptAtBlockID: {
                path: "/flow.access.AccessAPI/ExecuteScriptAtBlockID",
                requestStream: false,
                responseStream: false,
                requestSerialize: (message: ExecuteScriptAtBlockIDRequest) => Buffer.from(message.serialize()),
                requestDeserialize: (bytes: Buffer) => ExecuteScriptAtBlockIDRequest.deserialize(new Uint8Array(bytes)),
                responseSerialize: (message: ExecuteScriptResponse) => Buffer.from(message.serialize()),
                responseDeserialize: (bytes: Buffer) => ExecuteScriptResponse.deserialize(new Uint8Array(bytes))
            },
            ExecuteScriptAtBlockHeight: {
                path: "/flow.access.AccessAPI/ExecuteScriptAtBlockHeight",
                requestStream: false,
                responseStream: false,
                requestSerialize: (message: ExecuteScriptAtBlockHeightRequest) => Buffer.from(message.serialize()),
                requestDeserialize: (bytes: Buffer) => ExecuteScriptAtBlockHeightRequest.deserialize(new Uint8Array(bytes)),
                responseSerialize: (message: ExecuteScriptResponse) => Buffer.from(message.serialize()),
                responseDeserialize: (bytes: Buffer) => ExecuteScriptResponse.deserialize(new Uint8Array(bytes))
            },
            GetEventsForHeightRange: {
                path: "/flow.access.AccessAPI/GetEventsForHeightRange",
                requestStream: false,
                responseStream: false,
                requestSerialize: (message: GetEventsForHeightRangeRequest) => Buffer.from(message.serialize()),
                requestDeserialize: (bytes: Buffer) => GetEventsForHeightRangeRequest.deserialize(new Uint8Array(bytes)),
                responseSerialize: (message: EventsResponse) => Buffer.from(message.serialize()),
                responseDeserialize: (bytes: Buffer) => EventsResponse.deserialize(new Uint8Array(bytes))
            },
            GetEventsForBlockIDs: {
                path: "/flow.access.AccessAPI/GetEventsForBlockIDs",
                requestStream: false,
                responseStream: false,
                requestSerialize: (message: GetEventsForBlockIDsRequest) => Buffer.from(message.serialize()),
                requestDeserialize: (bytes: Buffer) => GetEventsForBlockIDsRequest.deserialize(new Uint8Array(bytes)),
                responseSerialize: (message: EventsResponse) => Buffer.from(message.serialize()),
                responseDeserialize: (bytes: Buffer) => EventsResponse.deserialize(new Uint8Array(bytes))
            },
            GetNetworkParameters: {
                path: "/flow.access.AccessAPI/GetNetworkParameters",
                requestStream: false,
                responseStream: false,
                requestSerialize: (message: GetNetworkParametersRequest) => Buffer.from(message.serialize()),
                requestDeserialize: (bytes: Buffer) => GetNetworkParametersRequest.deserialize(new Uint8Array(bytes)),
                responseSerialize: (message: GetNetworkParametersResponse) => Buffer.from(message.serialize()),
                responseDeserialize: (bytes: Buffer) => GetNetworkParametersResponse.deserialize(new Uint8Array(bytes))
            },
            GetLatestProtocolStateSnapshot: {
                path: "/flow.access.AccessAPI/GetLatestProtocolStateSnapshot",
                requestStream: false,
                responseStream: false,
                requestSerialize: (message: GetLatestProtocolStateSnapshotRequest) => Buffer.from(message.serialize()),
                requestDeserialize: (bytes: Buffer) => GetLatestProtocolStateSnapshotRequest.deserialize(new Uint8Array(bytes)),
                responseSerialize: (message: ProtocolStateSnapshotResponse) => Buffer.from(message.serialize()),
                responseDeserialize: (bytes: Buffer) => ProtocolStateSnapshotResponse.deserialize(new Uint8Array(bytes))
            },
            GetExecutionResultForBlockID: {
                path: "/flow.access.AccessAPI/GetExecutionResultForBlockID",
                requestStream: false,
                responseStream: false,
                requestSerialize: (message: GetExecutionResultForBlockIDRequest) => Buffer.from(message.serialize()),
                requestDeserialize: (bytes: Buffer) => GetExecutionResultForBlockIDRequest.deserialize(new Uint8Array(bytes)),
                responseSerialize: (message: ExecutionResultForBlockIDResponse) => Buffer.from(message.serialize()),
                responseDeserialize: (bytes: Buffer) => ExecutionResultForBlockIDResponse.deserialize(new Uint8Array(bytes))
            }
        };
        [method: string]: grpc_1.UntypedHandleCall;
        abstract Ping(call: grpc_1.ServerUnaryCall<PingRequest, PingResponse>, callback: grpc_1.sendUnaryData<PingResponse>): void;
        abstract GetLatestBlockHeader(call: grpc_1.ServerUnaryCall<GetLatestBlockHeaderRequest, BlockHeaderResponse>, callback: grpc_1.sendUnaryData<BlockHeaderResponse>): void;
        abstract GetBlockHeaderByID(call: grpc_1.ServerUnaryCall<GetBlockHeaderByIDRequest, BlockHeaderResponse>, callback: grpc_1.sendUnaryData<BlockHeaderResponse>): void;
        abstract GetBlockHeaderByHeight(call: grpc_1.ServerUnaryCall<GetBlockHeaderByHeightRequest, BlockHeaderResponse>, callback: grpc_1.sendUnaryData<BlockHeaderResponse>): void;
        abstract GetLatestBlock(call: grpc_1.ServerUnaryCall<GetLatestBlockRequest, BlockResponse>, callback: grpc_1.sendUnaryData<BlockResponse>): void;
        abstract GetBlockByID(call: grpc_1.ServerUnaryCall<GetBlockByIDRequest, BlockResponse>, callback: grpc_1.sendUnaryData<BlockResponse>): void;
        abstract GetBlockByHeight(call: grpc_1.ServerUnaryCall<GetBlockByHeightRequest, BlockResponse>, callback: grpc_1.sendUnaryData<BlockResponse>): void;
        abstract GetCollectionByID(call: grpc_1.ServerUnaryCall<GetCollectionByIDRequest, CollectionResponse>, callback: grpc_1.sendUnaryData<CollectionResponse>): void;
        abstract SendTransaction(call: grpc_1.ServerUnaryCall<SendTransactionRequest, SendTransactionResponse>, callback: grpc_1.sendUnaryData<SendTransactionResponse>): void;
        abstract GetTransaction(call: grpc_1.ServerUnaryCall<GetTransactionRequest, TransactionResponse>, callback: grpc_1.sendUnaryData<TransactionResponse>): void;
        abstract GetTransactionResult(call: grpc_1.ServerUnaryCall<GetTransactionRequest, TransactionResultResponse>, callback: grpc_1.sendUnaryData<TransactionResultResponse>): void;
        abstract GetTransactionResultByIndex(call: grpc_1.ServerUnaryCall<GetTransactionByIndexRequest, TransactionResultResponse>, callback: grpc_1.sendUnaryData<TransactionResultResponse>): void;
        abstract GetTransactionResultsByBlockID(call: grpc_1.ServerUnaryCall<GetTransactionsByBlockIDRequest, TransactionResultsResponse>, callback: grpc_1.sendUnaryData<TransactionResultsResponse>): void;
        abstract GetTransactionsByBlockID(call: grpc_1.ServerUnaryCall<GetTransactionsByBlockIDRequest, TransactionsResponse>, callback: grpc_1.sendUnaryData<TransactionsResponse>): void;
        abstract GetAccount(call: grpc_1.ServerUnaryCall<GetAccountRequest, GetAccountResponse>, callback: grpc_1.sendUnaryData<GetAccountResponse>): void;
        abstract GetAccountAtLatestBlock(call: grpc_1.ServerUnaryCall<GetAccountAtLatestBlockRequest, AccountResponse>, callback: grpc_1.sendUnaryData<AccountResponse>): void;
        abstract GetAccountAtBlockHeight(call: grpc_1.ServerUnaryCall<GetAccountAtBlockHeightRequest, AccountResponse>, callback: grpc_1.sendUnaryData<AccountResponse>): void;
        abstract ExecuteScriptAtLatestBlock(call: grpc_1.ServerUnaryCall<ExecuteScriptAtLatestBlockRequest, ExecuteScriptResponse>, callback: grpc_1.sendUnaryData<ExecuteScriptResponse>): void;
        abstract ExecuteScriptAtBlockID(call: grpc_1.ServerUnaryCall<ExecuteScriptAtBlockIDRequest, ExecuteScriptResponse>, callback: grpc_1.sendUnaryData<ExecuteScriptResponse>): void;
        abstract ExecuteScriptAtBlockHeight(call: grpc_1.ServerUnaryCall<ExecuteScriptAtBlockHeightRequest, ExecuteScriptResponse>, callback: grpc_1.sendUnaryData<ExecuteScriptResponse>): void;
        abstract GetEventsForHeightRange(call: grpc_1.ServerUnaryCall<GetEventsForHeightRangeRequest, EventsResponse>, callback: grpc_1.sendUnaryData<EventsResponse>): void;
        abstract GetEventsForBlockIDs(call: grpc_1.ServerUnaryCall<GetEventsForBlockIDsRequest, EventsResponse>, callback: grpc_1.sendUnaryData<EventsResponse>): void;
        abstract GetNetworkParameters(call: grpc_1.ServerUnaryCall<GetNetworkParametersRequest, GetNetworkParametersResponse>, callback: grpc_1.sendUnaryData<GetNetworkParametersResponse>): void;
        abstract GetLatestProtocolStateSnapshot(call: grpc_1.ServerUnaryCall<GetLatestProtocolStateSnapshotRequest, ProtocolStateSnapshotResponse>, callback: grpc_1.sendUnaryData<ProtocolStateSnapshotResponse>): void;
        abstract GetExecutionResultForBlockID(call: grpc_1.ServerUnaryCall<GetExecutionResultForBlockIDRequest, ExecutionResultForBlockIDResponse>, callback: grpc_1.sendUnaryData<ExecutionResultForBlockIDResponse>): void;
    }
    export class AccessAPIClient extends grpc_1.makeGenericClientConstructor(UnimplementedAccessAPIService.definition, "AccessAPI", {}) {
        constructor(address: string, credentials: grpc_1.ChannelCredentials, options?: Partial<grpc_1.ChannelOptions>) {
            super(address, credentials, options);
        }
        Ping: GrpcUnaryServiceInterface<PingRequest, PingResponse> = (message: PingRequest, metadata: grpc_1.Metadata | grpc_1.CallOptions | grpc_1.requestCallback<PingResponse>, options?: grpc_1.CallOptions | grpc_1.requestCallback<PingResponse>, callback?: grpc_1.requestCallback<PingResponse>): grpc_1.ClientUnaryCall => {
            return super.Ping(message, metadata, options, callback);
        };
        GetLatestBlockHeader: GrpcUnaryServiceInterface<GetLatestBlockHeaderRequest, BlockHeaderResponse> = (message: GetLatestBlockHeaderRequest, metadata: grpc_1.Metadata | grpc_1.CallOptions | grpc_1.requestCallback<BlockHeaderResponse>, options?: grpc_1.CallOptions | grpc_1.requestCallback<BlockHeaderResponse>, callback?: grpc_1.requestCallback<BlockHeaderResponse>): grpc_1.ClientUnaryCall => {
            return super.GetLatestBlockHeader(message, metadata, options, callback);
        };
        GetBlockHeaderByID: GrpcUnaryServiceInterface<GetBlockHeaderByIDRequest, BlockHeaderResponse> = (message: GetBlockHeaderByIDRequest, metadata: grpc_1.Metadata | grpc_1.CallOptions | grpc_1.requestCallback<BlockHeaderResponse>, options?: grpc_1.CallOptions | grpc_1.requestCallback<BlockHeaderResponse>, callback?: grpc_1.requestCallback<BlockHeaderResponse>): grpc_1.ClientUnaryCall => {
            return super.GetBlockHeaderByID(message, metadata, options, callback);
        };
        GetBlockHeaderByHeight: GrpcUnaryServiceInterface<GetBlockHeaderByHeightRequest, BlockHeaderResponse> = (message: GetBlockHeaderByHeightRequest, metadata: grpc_1.Metadata | grpc_1.CallOptions | grpc_1.requestCallback<BlockHeaderResponse>, options?: grpc_1.CallOptions | grpc_1.requestCallback<BlockHeaderResponse>, callback?: grpc_1.requestCallback<BlockHeaderResponse>): grpc_1.ClientUnaryCall => {
            return super.GetBlockHeaderByHeight(message, metadata, options, callback);
        };
        GetLatestBlock: GrpcUnaryServiceInterface<GetLatestBlockRequest, BlockResponse> = (message: GetLatestBlockRequest, metadata: grpc_1.Metadata | grpc_1.CallOptions | grpc_1.requestCallback<BlockResponse>, options?: grpc_1.CallOptions | grpc_1.requestCallback<BlockResponse>, callback?: grpc_1.requestCallback<BlockResponse>): grpc_1.ClientUnaryCall => {
            return super.GetLatestBlock(message, metadata, options, callback);
        };
        GetBlockByID: GrpcUnaryServiceInterface<GetBlockByIDRequest, BlockResponse> = (message: GetBlockByIDRequest, metadata: grpc_1.Metadata | grpc_1.CallOptions | grpc_1.requestCallback<BlockResponse>, options?: grpc_1.CallOptions | grpc_1.requestCallback<BlockResponse>, callback?: grpc_1.requestCallback<BlockResponse>): grpc_1.ClientUnaryCall => {
            return super.GetBlockByID(message, metadata, options, callback);
        };
        GetBlockByHeight: GrpcUnaryServiceInterface<GetBlockByHeightRequest, BlockResponse> = (message: GetBlockByHeightRequest, metadata: grpc_1.Metadata | grpc_1.CallOptions | grpc_1.requestCallback<BlockResponse>, options?: grpc_1.CallOptions | grpc_1.requestCallback<BlockResponse>, callback?: grpc_1.requestCallback<BlockResponse>): grpc_1.ClientUnaryCall => {
            return super.GetBlockByHeight(message, metadata, options, callback);
        };
        GetCollectionByID: GrpcUnaryServiceInterface<GetCollectionByIDRequest, CollectionResponse> = (message: GetCollectionByIDRequest, metadata: grpc_1.Metadata | grpc_1.CallOptions | grpc_1.requestCallback<CollectionResponse>, options?: grpc_1.CallOptions | grpc_1.requestCallback<CollectionResponse>, callback?: grpc_1.requestCallback<CollectionResponse>): grpc_1.ClientUnaryCall => {
            return super.GetCollectionByID(message, metadata, options, callback);
        };
        SendTransaction: GrpcUnaryServiceInterface<SendTransactionRequest, SendTransactionResponse> = (message: SendTransactionRequest, metadata: grpc_1.Metadata | grpc_1.CallOptions | grpc_1.requestCallback<SendTransactionResponse>, options?: grpc_1.CallOptions | grpc_1.requestCallback<SendTransactionResponse>, callback?: grpc_1.requestCallback<SendTransactionResponse>): grpc_1.ClientUnaryCall => {
            return super.SendTransaction(message, metadata, options, callback);
        };
        GetTransaction: GrpcUnaryServiceInterface<GetTransactionRequest, TransactionResponse> = (message: GetTransactionRequest, metadata: grpc_1.Metadata | grpc_1.CallOptions | grpc_1.requestCallback<TransactionResponse>, options?: grpc_1.CallOptions | grpc_1.requestCallback<TransactionResponse>, callback?: grpc_1.requestCallback<TransactionResponse>): grpc_1.ClientUnaryCall => {
            return super.GetTransaction(message, metadata, options, callback);
        };
        GetTransactionResult: GrpcUnaryServiceInterface<GetTransactionRequest, TransactionResultResponse> = (message: GetTransactionRequest, metadata: grpc_1.Metadata | grpc_1.CallOptions | grpc_1.requestCallback<TransactionResultResponse>, options?: grpc_1.CallOptions | grpc_1.requestCallback<TransactionResultResponse>, callback?: grpc_1.requestCallback<TransactionResultResponse>): grpc_1.ClientUnaryCall => {
            return super.GetTransactionResult(message, metadata, options, callback);
        };
        GetTransactionResultByIndex: GrpcUnaryServiceInterface<GetTransactionByIndexRequest, TransactionResultResponse> = (message: GetTransactionByIndexRequest, metadata: grpc_1.Metadata | grpc_1.CallOptions | grpc_1.requestCallback<TransactionResultResponse>, options?: grpc_1.CallOptions | grpc_1.requestCallback<TransactionResultResponse>, callback?: grpc_1.requestCallback<TransactionResultResponse>): grpc_1.ClientUnaryCall => {
            return super.GetTransactionResultByIndex(message, metadata, options, callback);
        };
        GetTransactionResultsByBlockID: GrpcUnaryServiceInterface<GetTransactionsByBlockIDRequest, TransactionResultsResponse> = (message: GetTransactionsByBlockIDRequest, metadata: grpc_1.Metadata | grpc_1.CallOptions | grpc_1.requestCallback<TransactionResultsResponse>, options?: grpc_1.CallOptions | grpc_1.requestCallback<TransactionResultsResponse>, callback?: grpc_1.requestCallback<TransactionResultsResponse>): grpc_1.ClientUnaryCall => {
            return super.GetTransactionResultsByBlockID(message, metadata, options, callback);
        };
        GetTransactionsByBlockID: GrpcUnaryServiceInterface<GetTransactionsByBlockIDRequest, TransactionsResponse> = (message: GetTransactionsByBlockIDRequest, metadata: grpc_1.Metadata | grpc_1.CallOptions | grpc_1.requestCallback<TransactionsResponse>, options?: grpc_1.CallOptions | grpc_1.requestCallback<TransactionsResponse>, callback?: grpc_1.requestCallback<TransactionsResponse>): grpc_1.ClientUnaryCall => {
            return super.GetTransactionsByBlockID(message, metadata, options, callback);
        };
        GetAccount: GrpcUnaryServiceInterface<GetAccountRequest, GetAccountResponse> = (message: GetAccountRequest, metadata: grpc_1.Metadata | grpc_1.CallOptions | grpc_1.requestCallback<GetAccountResponse>, options?: grpc_1.CallOptions | grpc_1.requestCallback<GetAccountResponse>, callback?: grpc_1.requestCallback<GetAccountResponse>): grpc_1.ClientUnaryCall => {
            return super.GetAccount(message, metadata, options, callback);
        };
        GetAccountAtLatestBlock: GrpcUnaryServiceInterface<GetAccountAtLatestBlockRequest, AccountResponse> = (message: GetAccountAtLatestBlockRequest, metadata: grpc_1.Metadata | grpc_1.CallOptions | grpc_1.requestCallback<AccountResponse>, options?: grpc_1.CallOptions | grpc_1.requestCallback<AccountResponse>, callback?: grpc_1.requestCallback<AccountResponse>): grpc_1.ClientUnaryCall => {
            return super.GetAccountAtLatestBlock(message, metadata, options, callback);
        };
        GetAccountAtBlockHeight: GrpcUnaryServiceInterface<GetAccountAtBlockHeightRequest, AccountResponse> = (message: GetAccountAtBlockHeightRequest, metadata: grpc_1.Metadata | grpc_1.CallOptions | grpc_1.requestCallback<AccountResponse>, options?: grpc_1.CallOptions | grpc_1.requestCallback<AccountResponse>, callback?: grpc_1.requestCallback<AccountResponse>): grpc_1.ClientUnaryCall => {
            return super.GetAccountAtBlockHeight(message, metadata, options, callback);
        };
        ExecuteScriptAtLatestBlock: GrpcUnaryServiceInterface<ExecuteScriptAtLatestBlockRequest, ExecuteScriptResponse> = (message: ExecuteScriptAtLatestBlockRequest, metadata: grpc_1.Metadata | grpc_1.CallOptions | grpc_1.requestCallback<ExecuteScriptResponse>, options?: grpc_1.CallOptions | grpc_1.requestCallback<ExecuteScriptResponse>, callback?: grpc_1.requestCallback<ExecuteScriptResponse>): grpc_1.ClientUnaryCall => {
            return super.ExecuteScriptAtLatestBlock(message, metadata, options, callback);
        };
        ExecuteScriptAtBlockID: GrpcUnaryServiceInterface<ExecuteScriptAtBlockIDRequest, ExecuteScriptResponse> = (message: ExecuteScriptAtBlockIDRequest, metadata: grpc_1.Metadata | grpc_1.CallOptions | grpc_1.requestCallback<ExecuteScriptResponse>, options?: grpc_1.CallOptions | grpc_1.requestCallback<ExecuteScriptResponse>, callback?: grpc_1.requestCallback<ExecuteScriptResponse>): grpc_1.ClientUnaryCall => {
            return super.ExecuteScriptAtBlockID(message, metadata, options, callback);
        };
        ExecuteScriptAtBlockHeight: GrpcUnaryServiceInterface<ExecuteScriptAtBlockHeightRequest, ExecuteScriptResponse> = (message: ExecuteScriptAtBlockHeightRequest, metadata: grpc_1.Metadata | grpc_1.CallOptions | grpc_1.requestCallback<ExecuteScriptResponse>, options?: grpc_1.CallOptions | grpc_1.requestCallback<ExecuteScriptResponse>, callback?: grpc_1.requestCallback<ExecuteScriptResponse>): grpc_1.ClientUnaryCall => {
            return super.ExecuteScriptAtBlockHeight(message, metadata, options, callback);
        };
        GetEventsForHeightRange: GrpcUnaryServiceInterface<GetEventsForHeightRangeRequest, EventsResponse> = (message: GetEventsForHeightRangeRequest, metadata: grpc_1.Metadata | grpc_1.CallOptions | grpc_1.requestCallback<EventsResponse>, options?: grpc_1.CallOptions | grpc_1.requestCallback<EventsResponse>, callback?: grpc_1.requestCallback<EventsResponse>): grpc_1.ClientUnaryCall => {
            return super.GetEventsForHeightRange(message, metadata, options, callback);
        };
        GetEventsForBlockIDs: GrpcUnaryServiceInterface<GetEventsForBlockIDsRequest, EventsResponse> = (message: GetEventsForBlockIDsRequest, metadata: grpc_1.Metadata | grpc_1.CallOptions | grpc_1.requestCallback<EventsResponse>, options?: grpc_1.CallOptions | grpc_1.requestCallback<EventsResponse>, callback?: grpc_1.requestCallback<EventsResponse>): grpc_1.ClientUnaryCall => {
            return super.GetEventsForBlockIDs(message, metadata, options, callback);
        };
        GetNetworkParameters: GrpcUnaryServiceInterface<GetNetworkParametersRequest, GetNetworkParametersResponse> = (message: GetNetworkParametersRequest, metadata: grpc_1.Metadata | grpc_1.CallOptions | grpc_1.requestCallback<GetNetworkParametersResponse>, options?: grpc_1.CallOptions | grpc_1.requestCallback<GetNetworkParametersResponse>, callback?: grpc_1.requestCallback<GetNetworkParametersResponse>): grpc_1.ClientUnaryCall => {
            return super.GetNetworkParameters(message, metadata, options, callback);
        };
        GetLatestProtocolStateSnapshot: GrpcUnaryServiceInterface<GetLatestProtocolStateSnapshotRequest, ProtocolStateSnapshotResponse> = (message: GetLatestProtocolStateSnapshotRequest, metadata: grpc_1.Metadata | grpc_1.CallOptions | grpc_1.requestCallback<ProtocolStateSnapshotResponse>, options?: grpc_1.CallOptions | grpc_1.requestCallback<ProtocolStateSnapshotResponse>, callback?: grpc_1.requestCallback<ProtocolStateSnapshotResponse>): grpc_1.ClientUnaryCall => {
            return super.GetLatestProtocolStateSnapshot(message, metadata, options, callback);
        };
        GetExecutionResultForBlockID: GrpcUnaryServiceInterface<GetExecutionResultForBlockIDRequest, ExecutionResultForBlockIDResponse> = (message: GetExecutionResultForBlockIDRequest, metadata: grpc_1.Metadata | grpc_1.CallOptions | grpc_1.requestCallback<ExecutionResultForBlockIDResponse>, options?: grpc_1.CallOptions | grpc_1.requestCallback<ExecutionResultForBlockIDResponse>, callback?: grpc_1.requestCallback<ExecutionResultForBlockIDResponse>): grpc_1.ClientUnaryCall => {
            return super.GetExecutionResultForBlockID(message, metadata, options, callback);
        };
    }
}
